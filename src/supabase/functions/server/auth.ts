import { createClient } from 'jsr:@supabase/supabase-js@2'

export async function signupUser(email: string, password: string, firstName: string, lastName: string, role: string = 'traveler') {
  const supabase = createClient(
    Deno.env.get('SUPABASE_URL')!,
    Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
  )

  try {
    // 1. Cr√©er l'utilisateur avec Supabase Auth
    const { data: authData, error: authError } = await supabase.auth.admin.createUser({
      email,
      password,
      user_metadata: { 
        first_name: firstName, 
        last_name: lastName 
      },
      email_confirm: true // Auto-confirm since we don't have email configured
    })

    if (authError) {
      throw new Error(`Erreur cr√©ation auth: ${authError.message}`)
    }

    const userId = authData.user.id

    // 2. Cr√©er l'entr√©e dans la table users via Supabase
    const { data: userData, error: userError } = await supabase
      .from('users')
      .insert({
        id: userId,
        email: email,
        status: 'active',
        gdpr_consent: true,
        locale: 'fr',
        first_name: firstName,
        last_name: lastName,
        role: role,
        first_login_completed: false
      })
      .select()
      .single()

    if (userError) {
      throw new Error(`Erreur cr√©ation utilisateur: ${userError.message}`)
    }

    return {
      success: true,
      user: {
        id: userId,
        email: email,
        profile: userData
      }
    }

  } catch (error) {
    console.error('Erreur signup:', error)
    return {
      success: false,
      error: error.message
    }
  }
}

export async function getUserProfile(userId: string) {
  const supabase = createClient(
    Deno.env.get('SUPABASE_URL')!,
    Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
  )

  try {
    // R√©cup√©rer l'utilisateur depuis Supabase
    const { data: userData, error } = await supabase
      .from('users')
      .select('*')
      .eq('id', userId)
      .single()

    if (error || !userData) {
      return null
    }

    return {
      id: userId,
      email: userData.email,
      profile: userData,
      user: userData
    }

  } catch (error) {
    console.error('Erreur getUserProfile:', error)
    return null
  }
}

export async function updateUserProfile(userId: string, updates: any) {
  const supabase = createClient(
    Deno.env.get('SUPABASE_URL')!,
    Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
  )

  try {
    // Mettre √† jour le profil dans Supabase
    const { data: updatedProfile, error } = await supabase
      .from('users')
      .update({
        ...updates,
        updated_at: new Date().toISOString()
      })
      .eq('id', userId)
      .select()
      .single()

    if (error) {
      throw new Error(`Erreur mise √† jour: ${error.message}`)
    }

    return {
      success: true,
      profile: updatedProfile
    }

  } catch (error) {
    console.error('Erreur updateUserProfile:', error)
    return {
      success: false,
      error: error.message
    }
  }
}

export async function checkUserAccess(accessToken: string) {
  // Cr√©er un client Supabase avec le token de l'utilisateur pour valider l'acc√®s
  const supabaseAdmin = createClient(
    Deno.env.get('SUPABASE_URL')!,
    Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
  )

  try {
    console.log('üîç [Auth] V√©rification acc√®s utilisateur avec token...')
    
    // V√©rifications pr√©liminaires du token
    if (!accessToken) {
      console.error('‚ùå [Supabase] Token d\'acc√®s vide ou null')
      return { authorized: false, user: null, error: 'Token manquant' }
    }

    if (accessToken.length < 20) {
      console.error('‚ùå [Supabase] Token trop court, probablement invalide:', accessToken.length, 'caract√®res')
      return { authorized: false, user: null, error: 'Token invalide' }
    }

    // V√©rifier que le token a le format JWT basique (3 parties s√©par√©es par des points)
    const tokenParts = accessToken.split('.')
    if (tokenParts.length !== 3) {
      console.error('‚ùå [Supabase] Token n\'a pas le format JWT valide')
      return { authorized: false, user: null, error: 'Format token invalide' }
    }

    // V√©rifier le contenu du payload JWT
    try {
      const payload = JSON.parse(atob(tokenParts[1]))
      if (!payload.sub) {
        console.error('‚ùå [Supabase] Token JWT sans claim "sub" requis')
        return { authorized: false, user: null, error: 'Token invalide - claim manquant' }
      }
      if (!payload.exp) {
        console.error('‚ùå [Supabase] Token JWT sans claim "exp" requis')
        return { authorized: false, user: null, error: 'Token invalide - expiration manquante' }
      }
      
      // ‚úÖ V√©rification d'expiration plus tol√©rante (5 minutes de gr√¢ce)
      const now = Math.floor(Date.now() / 1000)
      const gracePeriod = 300 // 5 minutes en secondes
      if (payload.exp < (now - gracePeriod)) {
        console.error('‚ùå [Supabase] Token JWT expir√©')
        return { 
          authorized: false, 
          user: null, 
          error: 'Token expir√©',
          shouldRefresh: true 
        }
      }
    } catch (decodeError) {
      console.warn('‚ö†Ô∏è [Supabase] Erreur d√©codage payload JWT, on continue quand m√™me:', decodeError)
      // Ne pas bloquer sur cette erreur, laisser Supabase g√©rer
    }
    
    // Utiliser le token JWT pour r√©cup√©rer l'utilisateur
    const { data: { user }, error } = await supabaseAdmin.auth.getUser(accessToken)
    
    if (error) {
      // Am√©liorer les messages d'erreur selon le type d'erreur
      const errorMessage = error.message
      
      if (errorMessage.includes('session_missing') || errorMessage.includes('Auth session missing')) {
        console.error('‚ùå [Supabase] Session d\'authentification manquante - Token probablement expir√©')
        return { 
          authorized: false, 
          user: null, 
          error: 'Session expir√©e',
          shouldRefresh: true 
        }
      } else if (errorMessage.includes('invalid_token') || errorMessage.includes('Invalid JWT')) {
        console.error('‚ùå [Supabase] Token JWT invalide ou malform√©')
        return { 
          authorized: false, 
          user: null, 
          error: 'Token invalide',
          shouldRefresh: true 
        }
      } else if (errorMessage.includes('expired')) {
        console.error('‚ùå [Supabase] Token expir√©')
        return { 
          authorized: false, 
          user: null, 
          error: 'Token expir√©',
          shouldRefresh: true 
        }
      } else if (errorMessage.includes('missing sub claim')) {
        console.error('‚ùå [Supabase] Token sans claim "sub" - token corrompu')
        return { 
          authorized: false, 
          user: null, 
          error: 'Token corrompu',
          shouldRefresh: true 
        }
      } else {
        console.error('‚ùå [Supabase] Erreur validation token:', errorMessage)
        return { 
          authorized: false, 
          user: null, 
          error: errorMessage 
        }
      }
    }
    
    if (!user) {
      console.error('‚ùå [Supabase] Aucun utilisateur trouv√© pour ce token valide')
      return { 
        authorized: false, 
        user: null, 
        error: 'Utilisateur introuvable' 
      }
    }

    console.log('‚úÖ [Supabase] Utilisateur trouv√©:', user.id, user.email)

    // R√©cup√©rer le profil complet depuis Supabase
    const userProfile = await getUserProfile(user.id)
    
    if (!userProfile) {
      console.error('‚ùå [Supabase] Profil utilisateur non trouv√© pour:', user.id)
      return { 
        authorized: false, 
        user: null, 
        error: 'Profil utilisateur manquant' 
      }
    }

    console.log('‚úÖ [Supabase] Profil trouv√©:', userProfile.profile.role, userProfile.user.status)

    // V√©rifier le statut de l'utilisateur
    if (userProfile.user.status === 'blocked') {
      console.log('‚ö†Ô∏è [Auth] Utilisateur bloqu√©:', user.id)
      return { 
        authorized: false, 
        user: null, 
        blocked: true,
        error: 'Compte bloqu√©' 
      }
    }

    if (userProfile.user.status === 'deleted') {
      console.log('‚ö†Ô∏è [Auth] Utilisateur supprim√©:', user.id)
      return { 
        authorized: false, 
        user: null, 
        error: 'Compte supprim√©' 
      }
    }

    return {
      authorized: true,
      user: userProfile
    }

  } catch (error) {
    console.error('üí• [Auth] Erreur critique checkUserAccess:', error)
    return { 
      authorized: false, 
      user: null, 
      error: 'Erreur serveur d\'authentification' 
    }
  }
}

export async function initializeDemoUsers() {
  const supabase = createClient(
    Deno.env.get('SUPABASE_URL')!,
    Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
  )

  try {
    console.log('Initialisation des utilisateurs de d√©mo...')

    // Cr√©er l'utilisateur admin
    const adminEmail = 'admin@gasyway.mg'
    const { data: adminData, error: adminError } = await supabase.auth.admin.createUser({
      email: adminEmail,
      password: 'admin123',
      user_metadata: { 
        first_name: 'Admin', 
        last_name: 'GasyWay' 
      },
      email_confirm: true
    })

    if (!adminError && adminData.user) {
      const adminUserId = adminData.user.id
      
      // Cr√©er les donn√©es admin dans Supabase
      await supabase
        .from('users')
        .upsert({
          id: adminUserId,
          email: adminEmail,
          status: 'active',
          gdpr_consent: true,
          locale: 'fr',
          first_name: 'Admin',
          last_name: 'GasyWay',
          role: 'admin',
          first_login_completed: true
        })

      console.log('Utilisateur admin cr√©√© avec succ√®s')
    } else if (!adminError) {
      console.log('Utilisateur admin existe d√©j√†')
    }

    // Cr√©er l'utilisateur voyageur
    const travelerEmail = 'voyageur@gasyway.mg'
    const { data: travelerData, error: travelerError } = await supabase.auth.admin.createUser({
      email: travelerEmail,
      password: 'voyageur123',
      user_metadata: { 
        first_name: 'Marie', 
        last_name: 'Rakoto' 
      },
      email_confirm: true
    })

    if (!travelerError && travelerData.user) {
      const travelerUserId = travelerData.user.id
      
      // Cr√©er les donn√©es voyageur dans Supabase
      await supabase
        .from('users')
        .upsert({
          id: travelerUserId,
          email: travelerEmail,
          status: 'active',
          gdpr_consent: true,
          locale: 'fr',
          first_name: 'Marie',
          last_name: 'Rakoto',
          role: 'traveler',
          first_login_completed: true
        })

      console.log('Utilisateur voyageur cr√©√© avec succ√®s')
    } else if (!travelerError) {
      console.log('Utilisateur voyageur existe d√©j√†')
    }

    return {
      success: true,
      message: 'Utilisateurs de d√©mo initialis√©s'
    }

  } catch (error) {
    console.error('Erreur initialisation utilisateurs d√©mo:', error)
    return {
      success: false,
      error: error.message
    }
  }
}