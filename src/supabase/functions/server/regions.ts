import { createClient } from 'jsr:@supabase/supabase-js@2'

const supabase = createClient(
  Deno.env.get('SUPABASE_URL')!,
  Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
)

export interface Region {
  id: string
  name: string
  slug?: string
  description?: string
  created_at?: string
  updated_at?: string
}

// ‚úÖ Obtenir toutes les r√©gions actives
export async function getAllRegions() {
  try {
    console.log('üìç [regions.ts] R√©cup√©ration de toutes les r√©gions...')
    
    const { data: regions, error } = await supabase
      .from('regions')
      .select('*')
      .order('name', { ascending: true })

    if (error) {
      console.error('‚ùå [regions.ts] Erreur lors de la r√©cup√©ration des r√©gions:', error)
      return {
        success: false,
        error: `Erreur lors de la r√©cup√©ration des r√©gions: ${error.message}`,
        regions: []
      }
    }

    console.log(`‚úÖ [regions.ts] ${regions?.length || 0} r√©gion(s) r√©cup√©r√©e(s)`)
    
    return {
      success: true,
      regions: regions || [],
      total: regions?.length || 0
    }
  } catch (error) {
    console.error('üí• [regions.ts] Erreur getAllRegions:', error)
    return {
      success: false,
      error: 'Erreur interne du serveur',
      regions: []
    }
  }
}

// ‚úÖ Obtenir une r√©gion par son ID
export async function getRegionById(regionId: string) {
  try {
    console.log(`üìç [regions.ts] R√©cup√©ration de la r√©gion ${regionId}...`)
    
    const { data: region, error } = await supabase
      .from('regions')
      .select('*')
      .eq('id', regionId)
      .single()

    if (error) {
      console.error('‚ùå [regions.ts] Erreur lors de la r√©cup√©ration de la r√©gion:', error)
      return {
        success: false,
        error: `R√©gion non trouv√©e: ${error.message}`,
        region: null
      }
    }

    console.log(`‚úÖ [regions.ts] R√©gion ${region.name} r√©cup√©r√©e`)
    
    return {
      success: true,
      region
    }
  } catch (error) {
    console.error('üí• [regions.ts] Erreur getRegionById:', error)
    return {
      success: false,
      error: 'Erreur interne du serveur',
      region: null
    }
  }
}

// ‚úÖ Cr√©er une nouvelle r√©gion (admin uniquement)
export async function createRegion(regionData: Partial<Region>) {
  try {
    console.log('üìç [regions.ts] Cr√©ation d\'une nouvelle r√©gion...')
    
    // G√©n√©rer un slug automatique si pas fourni
    if (!regionData.slug && regionData.name) {
      regionData.slug = regionData.name
        .toLowerCase()
        .replace(/[^a-z0-9]/g, '-')
        .replace(/-+/g, '-')
        .replace(/^-|-$/g, '')
    }
    
    const { data: region, error } = await supabase
      .from('regions')
      .insert([{
        id: crypto.randomUUID(),
        ...regionData,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      }])
      .select()
      .single()

    if (error) {
      console.error('‚ùå [regions.ts] Erreur lors de la cr√©ation de la r√©gion:', error)
      return {
        success: false,
        error: `Erreur lors de la cr√©ation: ${error.message}`,
        region: null
      }
    }

    console.log(`‚úÖ [regions.ts] R√©gion ${region.name} cr√©√©e avec succ√®s`)
    
    return {
      success: true,
      region,
      message: 'R√©gion cr√©√©e avec succ√®s'
    }
  } catch (error) {
    console.error('üí• [regions.ts] Erreur createRegion:', error)
    return {
      success: false,
      error: 'Erreur interne du serveur',
      region: null
    }
  }
}

// ‚úÖ Mettre √† jour une r√©gion (admin uniquement)
export async function updateRegion(regionId: string, updates: Partial<Region>) {
  try {
    console.log(`üìç [regions.ts] Mise √† jour de la r√©gion ${regionId}...`)
    
    const { data: region, error } = await supabase
      .from('regions')
      .update({
        ...updates,
        updated_at: new Date().toISOString()
      })
      .eq('id', regionId)
      .select()
      .single()

    if (error) {
      console.error('‚ùå [regions.ts] Erreur lors de la mise √† jour de la r√©gion:', error)
      return {
        success: false,
        error: `Erreur lors de la mise √† jour: ${error.message}`,
        region: null
      }
    }

    console.log(`‚úÖ [regions.ts] R√©gion ${region.name} mise √† jour`)
    
    return {
      success: true,
      region,
      message: 'R√©gion mise √† jour avec succ√®s'
    }
  } catch (error) {
    console.error('üí• [regions.ts] Erreur updateRegion:', error)
    return {
      success: false,
      error: 'Erreur interne du serveur',
      region: null
    }
  }
}

// ‚úÖ Supprimer une r√©gion (admin uniquement)
export async function deleteRegion(regionId: string) {
  try {
    console.log(`üìç [regions.ts] Suppression de la r√©gion ${regionId}...`)
    
    const { error } = await supabase
      .from('regions')
      .delete()
      .eq('id', regionId)

    if (error) {
      console.error('‚ùå [regions.ts] Erreur lors de la suppression de la r√©gion:', error)
      return {
        success: false,
        error: `Erreur lors de la suppression: ${error.message}`
      }
    }

    console.log(`‚úÖ [regions.ts] R√©gion supprim√©e avec succ√®s`)
    
    return {
      success: true,
      message: 'R√©gion supprim√©e avec succ√®s'
    }
  } catch (error) {
    console.error('üí• [regions.ts] Erreur deleteRegion:', error)
    return {
      success: false,
      error: 'Erreur interne du serveur'
    }
  }
}

// ‚úÖ Initialiser les donn√©es de r√©gions (donn√©es de d√©monstration)
export async function initializeRegions() {
  try {
    console.log('üìç [regions.ts] Initialisation des r√©gions...')
    
    // V√©rifier si des r√©gions existent d√©j√†
    const { data: existingRegions, error: checkError } = await supabase
      .from('regions')
      .select('id')
      .limit(1)

    if (checkError) {
      console.error('‚ùå [regions.ts] Erreur lors de la v√©rification des r√©gions:', checkError)
      return {
        success: false,
        error: `Erreur lors de la v√©rification: ${checkError.message}`
      }
    }

    if (existingRegions && existingRegions.length > 0) {
      console.log('‚ÑπÔ∏è [regions.ts] R√©gions d√©j√† initialis√©es')
      return {
        success: true,
        message: 'R√©gions d√©j√† initialis√©es',
        created: 0
      }
    }

    // Donn√©es de r√©gions de Madagascar
    const regionsData = [
      {
        id: crypto.randomUUID(),
        name: 'Antananarivo',
        slug: 'antananarivo',
        description: 'La capitale et r√©gion centrale de Madagascar'
      },
      {
        id: crypto.randomUUID(),
        name: 'Andasibe-Mantadia',
        slug: 'andasibe-mantadia',
        description: 'Parc national c√©l√®bre pour les l√©muriens Indri'
      },
      {
        id: crypto.randomUUID(),
        name: 'Antsirabe',
        slug: 'antsirabe',
        description: 'Ville thermale des hautes terres'
      },
      {
        id: crypto.randomUUID(),
        name: 'Morondava',
        slug: 'morondava',
        description: 'R√©gion ouest, c√©l√®bre pour l\'all√©e des Baobabs'
      },
      {
        id: crypto.randomUUID(),
        name: 'Tsingy de Bemaraha',
        slug: 'tsingy-bemaraha',
        description: 'Formations rocheuses spectaculaires de l\'ouest'
      },
      {
        id: crypto.randomUUID(),
        name: 'Nosy Be',
        slug: 'nosy-be',
        description: '√éle parfum√©e du nord-ouest'
      },
      {
        id: crypto.randomUUID(),
        name: 'Diego Suarez',
        slug: 'diego-suarez',
        description: 'Extr√™me nord de Madagascar'
      },
      {
        id: crypto.randomUUID(),
        name: 'Sainte-Marie',
        slug: 'sainte-marie',
        description: '√éle de la c√¥te est, parfaite pour les baleines'
      },
      {
        id: crypto.randomUUID(),
        name: 'Fianarantsoa',
        slug: 'fianarantsoa',
        description: 'R√©gion des hautes terres du sud'
      },
      {
        id: crypto.randomUUID(),
        name: 'Isalo',
        slug: 'isalo',
        description: 'Parc national aux paysages d√©sertiques'
      },
      {
        id: crypto.randomUUID(),
        name: 'Tul√©ar',
        slug: 'tulear',
        description: 'Porte d\'entr√©e du sud-ouest'
      },
      {
        id: crypto.randomUUID(),
        name: 'Fort Dauphin',
        slug: 'fort-dauphin',
        description: 'Extr√™me sud-est de l\'√Æle'
      }
    ]

    const { data: regions, error } = await supabase
      .from('regions')
      .insert(regionsData.map(region => ({
        ...region,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      })))
      .select()

    if (error) {
      console.error('‚ùå [regions.ts] Erreur lors de l\'initialisation:', error)
      return {
        success: false,
        error: `Erreur lors de l'initialisation: ${error.message}`
      }
    }

    console.log(`‚úÖ [regions.ts] ${regions?.length || 0} r√©gion(s) cr√©√©e(s)`)
    
    return {
      success: true,
      message: `${regions?.length || 0} r√©gions initialis√©es avec succ√®s`,
      created: regions?.length || 0
    }
  } catch (error) {
    console.error('üí• [regions.ts] Erreur initializeRegions:', error)
    return {
      success: false,
      error: 'Erreur interne du serveur'
    }
  }
}