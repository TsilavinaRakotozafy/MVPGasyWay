-- =====================================================
-- CORRECTION SYST√àME FAQ - GasyWay
-- Correction de l'erreur "column i.name_fr does not exist"
-- Script chronologique par √©tapes
-- =====================================================

-- =====================================================
-- √âTAPE 1: DIAGNOSTIC DES TABLES EXISTANTES
-- =====================================================

-- V√©rifier l'existence des tables n√©cessaires
SELECT 
    'V√©rification des tables existantes' as etape,
    table_name,
    'exists' as status
FROM information_schema.tables 
WHERE table_schema = 'public' 
AND table_name IN ('faqs', 'interests')
ORDER BY table_name;

-- V√©rifier la structure de la table interests
SELECT 
    'Structure table interests' as etape,
    column_name,
    data_type,
    is_nullable,
    column_default
FROM information_schema.columns 
WHERE table_schema = 'public' 
AND table_name = 'interests'
ORDER BY ordinal_position;

-- V√©rifier la structure de la table faqs
SELECT 
    'Structure table faqs' as etape,
    column_name,
    data_type,
    is_nullable,
    column_default
FROM information_schema.columns 
WHERE table_schema = 'public' 
AND table_name = 'faqs'
ORDER BY ordinal_position;

-- =====================================================
-- √âTAPE 2: CR√âER/CORRIGER LA TABLE FAQS
-- =====================================================

-- Cr√©er la table faqs si elle n'existe pas
CREATE TABLE IF NOT EXISTS faqs (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    interest_id UUID REFERENCES interests(id) ON DELETE CASCADE,
    question TEXT NOT NULL,
    answer TEXT NOT NULL,
    order_index INTEGER NOT NULL DEFAULT 1,
    is_active BOOLEAN NOT NULL DEFAULT true,
    faq_type VARCHAR(20) NOT NULL DEFAULT 'interest' CHECK (faq_type IN ('general', 'interest')),
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Ajouter la colonne faq_type si elle n'existe pas
DO $$ 
BEGIN
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'faqs' AND column_name = 'faq_type') THEN
        ALTER TABLE faqs ADD COLUMN faq_type VARCHAR(20) DEFAULT 'interest' CHECK (faq_type IN ('general', 'interest'));
        RAISE NOTICE 'Colonne faq_type ajout√©e';
    ELSE
        RAISE NOTICE 'Colonne faq_type existe d√©j√†';
    END IF;
END $$;

-- Rendre interest_id optionnel pour permettre les FAQ g√©n√©rales
ALTER TABLE faqs ALTER COLUMN interest_id DROP NOT NULL;

-- Ajouter la contrainte de coh√©rence
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM information_schema.check_constraints WHERE constraint_name = 'faq_type_consistency') THEN
        ALTER TABLE faqs ADD CONSTRAINT faq_type_consistency CHECK (
            (faq_type = 'general' AND interest_id IS NULL) OR 
            (faq_type = 'interest' AND interest_id IS NOT NULL)
        );
        RAISE NOTICE 'Contrainte faq_type_consistency ajout√©e';
    ELSE
        RAISE NOTICE 'Contrainte faq_type_consistency existe d√©j√†';
    END IF;
END $$;

-- =====================================================
-- √âTAPE 3: CR√âER LES INDEX OPTIMIS√âS
-- =====================================================

-- Index pour les FAQ g√©n√©rales
CREATE INDEX IF NOT EXISTS idx_faqs_general 
    ON faqs(faq_type, is_active, order_index) 
    WHERE faq_type = 'general';

-- Index pour les FAQ par centres d'int√©r√™t
CREATE INDEX IF NOT EXISTS idx_faqs_interest 
    ON faqs(interest_id, is_active, order_index) 
    WHERE interest_id IS NOT NULL;

-- Index g√©n√©ral pour type et statut actif
CREATE INDEX IF NOT EXISTS idx_faqs_type_active 
    ON faqs(faq_type, is_active, order_index);

-- =====================================================
-- √âTAPE 4: CR√âER LES TRIGGERS DE MISE √Ä JOUR
-- =====================================================

-- Fonction pour mise √† jour automatique du timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Trigger sur la table faqs
DROP TRIGGER IF EXISTS update_faqs_updated_at ON faqs;
CREATE TRIGGER update_faqs_updated_at 
    BEFORE UPDATE ON faqs 
    FOR EACH ROW 
    EXECUTE FUNCTION update_updated_at_column();

-- =====================================================
-- √âTAPE 5: CONFIGURER RLS (ROW LEVEL SECURITY)
-- =====================================================

-- Activer RLS sur la table
ALTER TABLE faqs ENABLE ROW LEVEL SECURITY;

-- Supprimer les anciennes politiques
DROP POLICY IF EXISTS "FAQ publiques lisibles par tous" ON faqs;
DROP POLICY IF EXISTS "Admins peuvent g√©rer toutes les FAQ" ON faqs;

-- Politique lecture : tout le monde peut lire les FAQ actives
CREATE POLICY "FAQ publiques lisibles par tous" ON faqs
    FOR SELECT USING (is_active = true);

-- Politique admin : les admins peuvent tout faire
CREATE POLICY "Admins peuvent g√©rer toutes les FAQ" ON faqs
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM users 
            WHERE users.id = auth.uid() 
            AND users.role = 'admin'
        )
    );

-- =====================================================
-- √âTAPE 6: CR√âER LES VUES (CORRIG√âES)
-- =====================================================

-- Vue pour les FAQ g√©n√©rales uniquement
CREATE OR REPLACE VIEW general_faqs AS
SELECT 
    id as faq_id,
    question,
    answer,
    order_index,
    created_at,
    updated_at
FROM faqs 
WHERE faq_type = 'general' 
  AND is_active = true
ORDER BY order_index ASC;

-- Vue pour les FAQ par centres d'int√©r√™t (CORRECTION: utiliser i.name au lieu de i.name_fr)
CREATE OR REPLACE VIEW interest_faqs AS
SELECT 
    f.id as faq_id,
    f.interest_id,
    f.question,
    f.answer,
    f.order_index,
    i.name as interest_name,  -- CORRECTION: name au lieu de name_fr
    COALESCE(i.icon_url, 'üìã') as interest_icon,  -- CORRECTION: utiliser icon_url avec fallback
    f.created_at,
    f.updated_at
FROM faqs f
JOIN interests i ON f.interest_id = i.id
WHERE f.faq_type = 'interest' 
  AND f.is_active = true
ORDER BY i.name, f.order_index ASC;

-- Vue administrative compl√®te (CORRIG√âE)
CREATE OR REPLACE VIEW admin_faqs_complete AS
SELECT 
    f.id,
    f.interest_id,
    f.question,
    f.answer,
    f.order_index,
    f.is_active,
    f.faq_type,
    f.created_at,
    f.updated_at,
    CASE 
        WHEN f.faq_type = 'general' THEN 'GasyWay'
        ELSE COALESCE(i.name, 'Inconnu')  -- CORRECTION: name au lieu de name_fr
    END as interest_name,
    CASE 
        WHEN f.faq_type = 'general' THEN '‚ùì'
        ELSE COALESCE(i.icon_url, 'üìã')  -- CORRECTION: icon_url au lieu de icon
    END as interest_icon
FROM faqs f
LEFT JOIN interests i ON f.interest_id = i.id
ORDER BY 
    f.faq_type,
    COALESCE(i.name, 'GasyWay'),  -- CORRECTION: name au lieu de name_fr
    f.order_index;

-- =====================================================
-- √âTAPE 7: FONCTION DE STATISTIQUES
-- =====================================================

CREATE OR REPLACE FUNCTION get_faq_stats()
RETURNS JSON AS $$
DECLARE
    result JSON;
BEGIN
    SELECT json_build_object(
        'total_faqs', (SELECT COUNT(*) FROM faqs),
        'active_faqs', (SELECT COUNT(*) FROM faqs WHERE is_active = true),
        'general_faqs', (SELECT COUNT(*) FROM faqs WHERE faq_type = 'general' AND is_active = true),
        'interest_faqs', (SELECT COUNT(*) FROM faqs WHERE faq_type = 'interest' AND is_active = true),
        'interests_with_faqs', (
            SELECT COUNT(DISTINCT interest_id) 
            FROM faqs 
            WHERE interest_id IS NOT NULL AND is_active = true
        )
    ) INTO result;
    
    RETURN result;
END;
$$ LANGUAGE plpgsql;

-- =====================================================
-- √âTAPE 8: INS√âRER LES FAQ G√âN√âRALES DE BASE
-- =====================================================

-- V√©rifier et ins√©rer les FAQ g√©n√©rales si elles n'existent pas
INSERT INTO faqs (interest_id, question, answer, order_index, faq_type)
SELECT NULL, q.question, q.answer, q.order_index, 'general'
FROM (VALUES
    ('Comment cr√©er un compte sur GasyWay ?', 
     'Pour cr√©er un compte, cliquez sur "Se connecter" puis "Cr√©er un compte". Renseignez votre email, mot de passe, nom et num√©ro de t√©l√©phone. Vous recevrez un email de confirmation.', 
     1),
    ('Comment r√©server un pack touristique ?', 
     'Parcourez notre catalogue, s√©lectionnez un pack qui vous int√©resse, choisissez vos dates et le nombre de participants, puis cliquez sur "R√©server". Remplissez le formulaire de contact pour finaliser votre demande.', 
     2),
    ('Quels sont les moyens de paiement accept√©s ?', 
     'Nous acceptons les virements bancaires, les paiements mobile money (Orange Money, MVola), et les paiements en esp√®ces selon les arrangements avec nos partenaires.', 
     3),
    ('Puis-je annuler ou modifier ma r√©servation ?', 
     'Oui, les annulations et modifications sont possibles selon les conditions de chaque pack. Contactez-nous au moins 48h avant le d√©part. Des frais peuvent s''appliquer selon la politique d''annulation.', 
     4),
    ('GasyWay propose-t-il des assurances voyage ?', 
     'Nous recommandons fortement de souscrire une assurance voyage. Certains de nos partenaires proposent des assurances, sinon nous pouvons vous orienter vers des assureurs locaux.', 
     5),
    ('Comment contacter le service client ?', 
     'Vous pouvez nous contacter via la messagerie int√©gr√©e √† la plateforme, par email √† support@gasyway.mg, ou par t√©l√©phone au +261 XX XXX XX XX. Notre √©quipe r√©pond dans les 24h.', 
     6),
    ('Les packs incluent-ils les vols internationaux ?', 
     'Non, nos packs couvrent uniquement les activit√©s et services √† Madagascar. Les vols internationaux sont √† organiser s√©par√©ment, mais nous pouvons vous conseiller sur les meilleures options.', 
     7),
    ('Qu''est-ce qui diff√©rencie GasyWay des autres agences ?', 
     'GasyWay connecte directement voyageurs et partenaires locaux experts. Notre plateforme garantit authenticit√©, prix transparents, et exp√©riences personnalis√©es avec un impact positif sur les communaut√©s locales.', 
     8)
) AS q(question, answer, order_index)
WHERE NOT EXISTS (
    SELECT 1 FROM faqs WHERE faq_type = 'general' AND faqs.question = q.question
);

-- =====================================================
-- √âTAPE 9: INS√âRER QUELQUES FAQ DE CENTRES D'INT√âR√äT
-- =====================================================

-- FAQ pour Nature (si le centre d'int√©r√™t existe)
INSERT INTO faqs (interest_id, question, answer, order_index, faq_type)
SELECT 
    i.id,
    'Quel est le meilleur moment pour observer la faune ?',
    'La p√©riode id√©ale est de septembre √† novembre (saison s√®che). Les animaux sont plus actifs le matin et en fin d''apr√®s-midi. Chaque parc a ses sp√©cificit√©s selon les esp√®ces √† observer.',
    1,
    'interest'
FROM interests i 
WHERE LOWER(i.name) LIKE '%nature%' 
AND NOT EXISTS (
    SELECT 1 FROM faqs f 
    WHERE f.interest_id = i.id 
    AND f.question LIKE '%meilleur moment%'
)
LIMIT 1;

-- FAQ pour Culture (si le centre d'int√©r√™t existe)
INSERT INTO faqs (interest_id, question, answer, order_index, faq_type)
SELECT 
    i.id,
    'Peut-on visiter les sites sacr√©s ?',
    'Certains sites sacr√©s sont accessibles aux visiteurs avec respect des traditions locales. Un guide culturel vous expliquera les r√®gles √† suivre et l''histoire des lieux.',
    1,
    'interest'
FROM interests i 
WHERE LOWER(i.name) LIKE '%culture%' 
AND NOT EXISTS (
    SELECT 1 FROM faqs f 
    WHERE f.interest_id = i.id 
    AND f.question LIKE '%sites sacr√©s%'
)
LIMIT 1;

-- FAQ pour Aventure (si le centre d'int√©r√™t existe)
INSERT INTO faqs (interest_id, question, answer, order_index, faq_type)
SELECT 
    i.id,
    'Quel niveau physique est requis pour les activit√©s d''aventure ?',
    'Le niveau requis varie selon l''activit√©. Nous proposons des exp√©riences pour tous niveaux : d√©butant, interm√©diaire et expert. Chaque pack pr√©cise le niveau de difficult√© et les pr√©requis.',
    1,
    'interest'
FROM interests i 
WHERE LOWER(i.name) LIKE '%aventure%' 
AND NOT EXISTS (
    SELECT 1 FROM faqs f 
    WHERE f.interest_id = i.id 
    AND f.question LIKE '%niveau physique%'
)
LIMIT 1;

-- =====================================================
-- √âTAPE 10: ACCORDER LES PERMISSIONS
-- =====================================================

-- Permissions sur les tables
GRANT SELECT ON faqs TO authenticated, anon;
GRANT SELECT ON general_faqs TO authenticated, anon;
GRANT SELECT ON interest_faqs TO authenticated, anon;
GRANT SELECT ON admin_faqs_complete TO authenticated;

-- Permission sur la fonction
GRANT EXECUTE ON FUNCTION get_faq_stats() TO authenticated;

-- =====================================================
-- √âTAPE 11: COMMENTAIRES POUR DOCUMENTATION
-- =====================================================

COMMENT ON TABLE faqs IS 'Table FAQ supportant FAQ g√©n√©rales et FAQ par centres d''int√©r√™t';
COMMENT ON COLUMN faqs.faq_type IS 'Type de FAQ: general pour GasyWay, interest pour centres d''int√©r√™t';
COMMENT ON COLUMN faqs.interest_id IS 'R√©f√©rence au centre d''int√©r√™t (NULL pour FAQ g√©n√©rales)';
COMMENT ON VIEW general_faqs IS 'FAQ g√©n√©rales de GasyWay accessibles publiquement';
COMMENT ON VIEW interest_faqs IS 'FAQ sp√©cifiques aux centres d''int√©r√™t avec nom corrig√©';
COMMENT ON VIEW admin_faqs_complete IS 'Vue administrative compl√®te avec colonnes corrig√©es';

-- =====================================================
-- √âTAPE 12: TESTS ET V√âRIFICATIONS FINALES
-- =====================================================

-- Test 1: V√©rifier que les vues fonctionnent sans erreur
SELECT 'Test vue general_faqs' as test, COUNT(*) as count FROM general_faqs;

-- Test 2: V√©rifier la vue interest_faqs (devrait maintenant fonctionner)
SELECT 'Test vue interest_faqs' as test, COUNT(*) as count FROM interest_faqs;

-- Test 3: V√©rifier la vue admin compl√®te
SELECT 'Test vue admin_faqs_complete' as test, COUNT(*) as count FROM admin_faqs_complete;

-- Test 4: Afficher quelques exemples de chaque vue
SELECT 'Exemple FAQ g√©n√©rales:' as section;
SELECT faq_id, question, LEFT(answer, 50) || '...' as answer_preview
FROM general_faqs LIMIT 3;

SELECT 'Exemple FAQ centres d''int√©r√™t:' as section;
SELECT faq_id, interest_name, question, LEFT(answer, 50) || '...' as answer_preview
FROM interest_faqs LIMIT 3;

-- Test 5: Statistiques finales
SELECT 'STATISTIQUES FINALES:' as section;
SELECT get_faq_stats() as stats;

-- Test 6: R√©sum√© du d√©ploiement
SELECT 
    'D√âPLOIEMENT SYST√àME FAQ TERMIN√â!' as status,
    (SELECT COUNT(*) FROM faqs WHERE faq_type = 'general') as general_faqs_count,  
    (SELECT COUNT(*) FROM faqs WHERE faq_type = 'interest') as interest_faqs_count,
    (SELECT COUNT(*) FROM faqs) as total_faqs_count,
    (SELECT COUNT(*) FROM interests) as available_interests;

-- =====================================================
-- NOTES D'UTILISATION
-- =====================================================

/*
UTILISATION DES VUES :

1. FAQ G√âN√âRALES (publiques) :
   SELECT * FROM general_faqs;

2. FAQ PAR CENTRES D'INT√âR√äT :
   SELECT * FROM interest_faqs WHERE interest_name = 'Nature';

3. VUE ADMINISTRATIVE COMPL√àTE :
   SELECT * FROM admin_faqs_complete ORDER BY faq_type, interest_name;

4. STATISTIQUES :
   SELECT get_faq_stats();

CORRECTIONS APPORT√âES :
- ‚úÖ i.name_fr ‚Üí i.name (colonne r√©elle de la table interests)
- ‚úÖ i.icon ‚Üí i.icon_url avec fallback (colonne r√©elle + valeur par d√©faut)
- ‚úÖ Gestion des NULL avec COALESCE
- ‚úÖ Tests int√©gr√©s pour v√©rifier le bon fonctionnement
- ‚úÖ Documentation compl√®te des changements
*/