-- ============================================================================
-- üîß SCRIPT DE R√âPARATION DU COMPTE ADMIN GASYWAY
-- ============================================================================
-- Ce script r√©pare les probl√®mes courants du compte administrateur
-- √Ä ex√©cuter si des incoh√©rences sont d√©tect√©es
-- ============================================================================

BEGIN;

DO $$
DECLARE
    admin_email VARCHAR := 'admin@gasyway.com';
    admin_auth_id UUID;
    repair_actions TEXT[] := ARRAY[]::TEXT[];
    admin_in_auth BOOLEAN := false;
    admin_in_users BOOLEAN := false;
    admin_in_profiles BOOLEAN := false;
BEGIN
    
    RAISE NOTICE 'üîß D√âBUT - R√©paration du compte admin';
    RAISE NOTICE '=====================================';
    
    -- ========================================================================
    -- DIAGNOSTIC INITIAL
    -- ========================================================================
    
    RAISE NOTICE 'üîç Diagnostic des probl√®mes...';
    
    -- V√©rifier auth.users
    SELECT EXISTS(SELECT 1 FROM auth.users WHERE email = admin_email) INTO admin_in_auth;
    IF admin_in_auth THEN
        SELECT id INTO admin_auth_id FROM auth.users WHERE email = admin_email LIMIT 1;
        RAISE NOTICE '‚úÖ Admin trouv√© dans auth.users: %', admin_auth_id;
    ELSE
        RAISE NOTICE '‚ùå Admin ABSENT de auth.users';
        repair_actions := array_append(repair_actions, 'CR√âER_AUTH_USER');
    END IF;
    
    -- V√©rifier public.users
    SELECT EXISTS(SELECT 1 FROM public.users WHERE email = admin_email) INTO admin_in_users;
    IF admin_in_users THEN
        RAISE NOTICE '‚úÖ Admin trouv√© dans public.users';
    ELSE
        RAISE NOTICE '‚ùå Admin ABSENT de public.users';
        repair_actions := array_append(repair_actions, 'CR√âER_PUBLIC_USER');
    END IF;
    
    -- V√©rifier profiles
    IF admin_in_auth THEN
        SELECT EXISTS(SELECT 1 FROM public.profiles WHERE user_id = admin_auth_id) INTO admin_in_profiles;
        IF admin_in_profiles THEN
            RAISE NOTICE '‚úÖ Profil admin trouv√©';
        ELSE
            RAISE NOTICE '‚ùå Profil admin ABSENT';
            repair_actions := array_append(repair_actions, 'CR√âER_PROFIL');
        END IF;
    END IF;
    
    RAISE NOTICE '';
    RAISE NOTICE 'Actions de r√©paration n√©cessaires: %', array_length(repair_actions, 1);
    
    -- ========================================================================
    -- R√âPARATIONS AUTOMATIQUES
    -- ========================================================================
    
    IF NOT admin_in_auth THEN
        RAISE NOTICE '';
        RAISE NOTICE 'üö´ ARR√äT - Admin non trouv√© dans auth.users';
        RAISE NOTICE '';
        RAISE NOTICE 'üìù ACTIONS MANUELLES REQUISES:';
        RAISE NOTICE '1. Aller dans Supabase Dashboard';
        RAISE NOTICE '2. Authentication ‚Üí Users ‚Üí "Add user"';
        RAISE NOTICE '3. Email: %', admin_email;
        RAISE NOTICE '4. Password: Admin123!GasyWay';
        RAISE NOTICE '5. ‚úÖ Cocher "Confirm email"';
        RAISE NOTICE '6. Cliquer "Create user"';
        RAISE NOTICE '7. Relancer ce script';
        
        RAISE EXCEPTION 'Cr√©ation manuelle requise dans auth.users';
    END IF;
    
    -- R√©paration public.users
    IF NOT admin_in_users OR 'CR√âER_PUBLIC_USER' = ANY(repair_actions) THEN
        RAISE NOTICE '';
        RAISE NOTICE 'üîß R√©paration public.users...';
        
        INSERT INTO public.users (
            id, email, role, gdpr_consent, status, locale, created_at, updated_at
        ) VALUES (
            admin_auth_id, admin_email, 'admin', true, 'active', 'fr', now(), now()
        ) ON CONFLICT (id) DO UPDATE SET
            email = admin_email,
            role = 'admin',
            status = 'active',
            gdpr_consent = true,
            locale = 'fr',
            updated_at = now();
        
        RAISE NOTICE '‚úÖ public.users r√©par√©';
    END IF;
    
    -- R√©paration profiles
    IF NOT admin_in_profiles OR 'CR√âER_PROFIL' = ANY(repair_actions) THEN
        RAISE NOTICE '';
        RAISE NOTICE 'üîß R√©paration profiles...';
        
        INSERT INTO public.profiles (
            user_id, first_name, last_name, phone, created_at, updated_at
        ) VALUES (
            admin_auth_id, 'Admin', 'GasyWay', '+261123456789', now(), now()
        ) ON CONFLICT (user_id) DO UPDATE SET
            first_name = 'Admin',
            last_name = 'GasyWay',
            phone = '+261123456789',
            updated_at = now();
        
        RAISE NOTICE '‚úÖ profiles r√©par√©';
    END IF;
    
    -- ========================================================================
    -- NETTOYAGE DES DOUBLONS
    -- ========================================================================
    
    RAISE NOTICE '';
    RAISE NOTICE 'üßπ Nettoyage des doublons...';
    
    -- Supprimer les doublons dans users (garder le plus r√©cent)
    WITH user_duplicates AS (
        SELECT id, ROW_NUMBER() OVER (PARTITION BY email ORDER BY created_at DESC) as rn
        FROM public.users 
        WHERE email = admin_email
    )
    DELETE FROM public.users 
    WHERE id IN (SELECT id FROM user_duplicates WHERE rn > 1);
    
    -- Supprimer les doublons dans profiles
    WITH profile_duplicates AS (
        SELECT user_id, ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY created_at DESC) as rn
        FROM public.profiles 
        WHERE user_id = admin_auth_id
    )
    DELETE FROM public.profiles 
    WHERE user_id IN (SELECT user_id FROM profile_duplicates WHERE rn > 1);
    
    -- Nettoyer les profils orphelins (sans utilisateur correspondant)
    DELETE FROM public.profiles 
    WHERE user_id NOT IN (SELECT id FROM public.users);
    
    RAISE NOTICE '‚úÖ Nettoyage termin√©';
    
    -- ========================================================================
    -- V√âRIFICATIONS FINALES
    -- ========================================================================
    
    RAISE NOTICE '';
    RAISE NOTICE 'üîç V√©rifications finales...';
    
    -- Rev√©rifier tout
    SELECT EXISTS(SELECT 1 FROM auth.users WHERE email = admin_email) INTO admin_in_auth;
    SELECT EXISTS(SELECT 1 FROM public.users WHERE email = admin_email AND role = 'admin') INTO admin_in_users;
    SELECT EXISTS(SELECT 1 FROM public.profiles WHERE user_id = admin_auth_id) INTO admin_in_profiles;
    
    IF admin_in_auth AND admin_in_users AND admin_in_profiles THEN
        RAISE NOTICE '';
        RAISE NOTICE 'üéâ R√âPARATION R√âUSSIE!';
        RAISE NOTICE '====================';
        RAISE NOTICE 'ID: %', admin_auth_id;
        RAISE NOTICE 'Email: %', admin_email;
        RAISE NOTICE 'Statut: Compte admin fonctionnel';
        RAISE NOTICE '';
        RAISE NOTICE 'üîë Connexion possible avec:';
        RAISE NOTICE 'Email: %', admin_email;
        RAISE NOTICE 'Password: Admin123!GasyWay';
    ELSE
        RAISE NOTICE '';
        RAISE NOTICE '‚ùå R√âPARATION INCOMPL√àTE';
        RAISE NOTICE 'Auth.users: %', CASE WHEN admin_in_auth THEN 'OK' ELSE 'KO' END;
        RAISE NOTICE 'Public.users: %', CASE WHEN admin_in_users THEN 'OK' ELSE 'KO' END;
        RAISE NOTICE 'Profiles: %', CASE WHEN admin_in_profiles THEN 'OK' ELSE 'KO' END;
    END IF;
    
END $$;

-- ============================================================================
-- V√âRIFICATION POST-R√âPARATION
-- ============================================================================

SELECT 'üîç V√âRIFICATION POST-R√âPARATION' as status;

SELECT 
    u.id,
    u.email,
    u.role,
    u.status,
    p.first_name,
    p.last_name,
    p.phone,
    CASE 
        WHEN au.id IS NOT NULL THEN '‚úÖ Synchro OK'
        ELSE '‚ùå D√©synchronis√©'
    END as auth_sync_status
FROM public.users u
LEFT JOIN public.profiles p ON u.id = p.user_id
LEFT JOIN auth.users au ON u.id = au.id
WHERE u.email = 'admin@gasyway.com'
ORDER BY u.created_at DESC;

-- Statistiques des r√©parations
SELECT 
    'Admins actifs' as metric,
    COUNT(*) as count
FROM public.users 
WHERE role = 'admin' AND status = 'active'

UNION ALL

SELECT 
    'Profils orphelins restants' as metric,
    COUNT(*) as count
FROM public.profiles p
LEFT JOIN public.users u ON p.user_id = u.id
WHERE u.id IS NULL;

COMMIT;

-- ============================================================================
-- üìù PROBL√àMES FR√âQUENTS ET SOLUTIONS
-- ============================================================================

/*
üî∏ PROBL√àMES COURANTS R√âSOLUS :
   ‚Ä¢ Admin manquant dans public.users
   ‚Ä¢ Profil manquant dans profiles
   ‚Ä¢ Doublons caus√©s par cr√©ations multiples
   ‚Ä¢ D√©synchronisation entre auth.users et public.users
   ‚Ä¢ Profils orphelins (sans utilisateur parent)

üî∏ LIMITATIONS :
   ‚Ä¢ Ne peut pas cr√©er dans auth.users (Dashboard seulement)
   ‚Ä¢ Ne peut pas modifier les mots de passe auth
   ‚Ä¢ Requiert les tables existantes

üî∏ APR√àS R√âPARATION :
   ‚Ä¢ Tester la connexion sur l'application
   ‚Ä¢ V√©rifier les permissions admin
   ‚Ä¢ Contr√¥ler l'acc√®s aux fonctions admin

üî∏ SI PROBL√àME PERSISTE :
   1. Ex√©cuter verify_admin_account.sql
   2. V√©rifier les logs d'erreur
   3. Recreer compl√®tement via create_admin_account.sql
*/