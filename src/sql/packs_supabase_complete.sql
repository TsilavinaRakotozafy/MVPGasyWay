-- ===============================================
-- SCRIPT PACKS SUPABASE COMPLET üéØ
-- Cr√©ation des tables packs et relations
-- ===============================================

-- üîç PHASE 1: D√âTECTION AUTOMATIQUE DE L'ARCHITECTURE (r√©utilisation du syst√®me partners)
-- =====================================================

DO $$
DECLARE
  architecture_type TEXT := 'unknown';
  users_has_role BOOLEAN := false;
  profiles_exists BOOLEAN := false;
  profiles_has_role BOOLEAN := false;
BEGIN
  RAISE NOTICE 'üîç D√âTECTION AUTOMATIQUE DE L''ARCHITECTURE...';
  RAISE NOTICE '================================================';

  -- V√©rifier si table users a la colonne role
  SELECT EXISTS (
    SELECT 1 FROM information_schema.columns 
    WHERE table_name = 'users' AND column_name = 'role'
  ) INTO users_has_role;

  -- V√©rifier si table profiles existe
  SELECT EXISTS (
    SELECT 1 FROM information_schema.tables 
    WHERE table_name = 'profiles'
  ) INTO profiles_exists;

  -- V√©rifier si profiles a la colonne role
  IF profiles_exists THEN
    SELECT EXISTS (
      SELECT 1 FROM information_schema.columns 
      WHERE table_name = 'profiles' AND column_name = 'role'
    ) INTO profiles_has_role;
  END IF;

  -- D√©terminer l'architecture
  IF users_has_role AND NOT profiles_exists THEN
    architecture_type := 'users_unified';
    RAISE NOTICE '‚úÖ ARCHITECTURE: Table users unifi√©e (avec r√¥le)';
  ELSIF profiles_exists AND profiles_has_role THEN
    architecture_type := 'users_profiles_split';
    RAISE NOTICE '‚úÖ ARCHITECTURE: Tables s√©par√©es users + profiles (r√¥le dans profiles)';
  ELSIF profiles_exists AND users_has_role THEN
    architecture_type := 'hybrid';
    RAISE NOTICE '‚úÖ ARCHITECTURE: Hybride (r√¥le dans les deux tables)';
  ELSE
    architecture_type := 'basic_users';
    RAISE NOTICE '‚úÖ ARCHITECTURE: Table users basique (sans r√¥le)';
  END IF;

  -- Stocker dans une table temporaire pour utilisation ult√©rieure
  CREATE TEMP TABLE IF NOT EXISTS detected_architecture (
    architecture_type TEXT,
    users_has_role BOOLEAN,
    profiles_exists BOOLEAN,
    profiles_has_role BOOLEAN
  );
  
  DELETE FROM detected_architecture;
  INSERT INTO detected_architecture VALUES (
    architecture_type, users_has_role, profiles_exists, profiles_has_role
  );

END $$;

-- üõ°Ô∏è PHASE 2: NETTOYAGE S√âCURIS√â PR√âVENTIF
-- ==========================================

DO $$
BEGIN
  RAISE NOTICE 'üßπ NETTOYAGE PR√âVENTIF...';
  
  -- Supprimer types ENUM potentiellement conflictuels
  DROP TYPE IF EXISTS pack_status CASCADE;
  DROP TYPE IF EXISTS pack_difficulty CASCADE;
  DROP TYPE IF EXISTS pack_itinerary_day CASCADE;
  
  -- Supprimer tables dans l'ordre des d√©pendances
  DROP TABLE IF EXISTS pack_images CASCADE;
  DROP TABLE IF EXISTS pack_services CASCADE;
  DROP TABLE IF EXISTS pack_itinerary CASCADE;
  DROP TABLE IF EXISTS packs CASCADE;
  DROP TABLE IF EXISTS pack_categories CASCADE;
  
  RAISE NOTICE '‚úÖ Nettoyage termin√©';
END $$;

-- üèóÔ∏è PHASE 3: CR√âATION DES TYPES ENUM
-- =====================================

CREATE TYPE pack_status AS ENUM ('active', 'inactive', 'archived');
CREATE TYPE pack_difficulty AS ENUM ('easy', 'medium', 'hard');

-- üèóÔ∏è PHASE 4: CR√âATION DES TABLES
-- =================================

-- Table des cat√©gories de packs
CREATE TABLE pack_categories (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name VARCHAR(100) NOT NULL UNIQUE,
  description TEXT,
  icon VARCHAR(10), -- Emoji ou code ic√¥ne
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- Table principale des packs
CREATE TABLE packs (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  
  -- Informations de base
  title VARCHAR(255) NOT NULL,
  description TEXT NOT NULL, 
  short_description TEXT,
  
  -- Prix et participants
  price DECIMAL(12,2) NOT NULL CHECK (price >= 0),
  currency VARCHAR(3) DEFAULT 'MGA',
  duration_days INTEGER NOT NULL CHECK (duration_days > 0),
  max_participants INTEGER NOT NULL CHECK (max_participants > 0),
  min_participants INTEGER DEFAULT 1 CHECK (min_participants > 0),
  
  -- Localisation
  location VARCHAR(255) NOT NULL,
  coordinates_lat DECIMAL(10, 8), -- Latitude
  coordinates_lng DECIMAL(11, 8), -- Longitude
  
  -- Cat√©gorie et statut
  category_id UUID REFERENCES pack_categories(id) ON DELETE SET NULL,
  status pack_status DEFAULT 'inactive',
  difficulty_level pack_difficulty DEFAULT 'medium',
  
  -- Saisons (format MM-DD)
  season_start VARCHAR(5), -- Ex: "04-01" pour 1er avril
  season_end VARCHAR(5),   -- Ex: "11-30" pour 30 novembre
  
  -- Politiques
  cancellation_policy TEXT,
  
  -- M√©tadonn√©es
  created_by UUID REFERENCES users(id) ON DELETE SET NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
  
  -- Contraintes
  CONSTRAINT valid_participants CHECK (min_participants <= max_participants),
  CONSTRAINT valid_seasons CHECK (
    (season_start IS NULL AND season_end IS NULL) OR 
    (season_start IS NOT NULL AND season_end IS NOT NULL)
  )
);

-- Table des images de packs
CREATE TABLE pack_images (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  pack_id UUID NOT NULL REFERENCES packs(id) ON DELETE CASCADE,
  image_url TEXT NOT NULL,
  alt_text VARCHAR(255),
  display_order INTEGER DEFAULT 0,
  is_primary BOOLEAN DEFAULT false,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- Table des services inclus/exclus
CREATE TABLE pack_services (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  pack_id UUID NOT NULL REFERENCES packs(id) ON DELETE CASCADE,
  service_name VARCHAR(255) NOT NULL,
  is_included BOOLEAN NOT NULL DEFAULT true, -- true = inclus, false = exclu
  display_order INTEGER DEFAULT 0,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- Table de l'itin√©raire jour par jour
CREATE TABLE pack_itinerary (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  pack_id UUID NOT NULL REFERENCES packs(id) ON DELETE CASCADE,
  day_number INTEGER NOT NULL CHECK (day_number > 0),
  title VARCHAR(255) NOT NULL,
  description TEXT,
  activities TEXT[], -- Array des activit√©s
  accommodation VARCHAR(255),
  meals_included VARCHAR(100), -- Ex: "Petit-d√©jeuner, D√©jeuner"
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
  
  UNIQUE(pack_id, day_number)
);

-- üìä PHASE 5: INDEX POUR PERFORMANCES
-- ====================================

-- Index pour les packs
CREATE INDEX idx_packs_status ON packs(status);
CREATE INDEX idx_packs_category ON packs(category_id);
CREATE INDEX idx_packs_location ON packs(location);
CREATE INDEX idx_packs_price ON packs(price);
CREATE INDEX idx_packs_duration ON packs(duration_days);
CREATE INDEX idx_packs_difficulty ON packs(difficulty_level);
CREATE INDEX idx_packs_created_at ON packs(created_at DESC);
CREATE INDEX idx_packs_created_by ON packs(created_by);

-- Index pour les images
CREATE INDEX idx_pack_images_pack_id ON pack_images(pack_id);
CREATE INDEX idx_pack_images_primary ON pack_images(pack_id, is_primary);
CREATE INDEX idx_pack_images_order ON pack_images(pack_id, display_order);

-- Index pour les services
CREATE INDEX idx_pack_services_pack_id ON pack_services(pack_id);
CREATE INDEX idx_pack_services_included ON pack_services(pack_id, is_included);

-- Index pour l'itin√©raire
CREATE INDEX idx_pack_itinerary_pack_id ON pack_itinerary(pack_id);
CREATE INDEX idx_pack_itinerary_day ON pack_itinerary(pack_id, day_number);

-- Index g√©ospatial pour la recherche par coordonn√©es (optionnel)
-- CREATE INDEX idx_packs_coordinates ON packs USING GIST (point(coordinates_lng, coordinates_lat));

-- ‚öôÔ∏è PHASE 6: FONCTIONS TRIGGER
-- ==============================

-- Fonction pour updated_at
CREATE OR REPLACE FUNCTION update_packs_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION update_pack_categories_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Triggers pour updated_at
CREATE TRIGGER update_packs_updated_at_trigger
  BEFORE UPDATE ON packs
  FOR EACH ROW
  EXECUTE FUNCTION update_packs_updated_at();

CREATE TRIGGER update_pack_categories_updated_at_trigger
  BEFORE UPDATE ON pack_categories
  FOR EACH ROW
  EXECUTE FUNCTION update_pack_categories_updated_at();

-- üîê PHASE 7: POLITIQUES RLS ADAPTATIVES
-- =======================================

DO $$
DECLARE
  arch_info RECORD;
BEGIN
  RAISE NOTICE 'üîê CR√âATION POLITIQUES RLS ADAPTATIVES...';
  
  -- R√©cup√©rer l'architecture d√©tect√©e
  SELECT * INTO arch_info FROM detected_architecture LIMIT 1;
  
  -- Activer RLS sur toutes les tables
  ALTER TABLE pack_categories ENABLE ROW LEVEL SECURITY;
  ALTER TABLE packs ENABLE ROW LEVEL SECURITY;
  ALTER TABLE pack_images ENABLE ROW LEVEL SECURITY;
  ALTER TABLE pack_services ENABLE ROW LEVEL SECURITY;
  ALTER TABLE pack_itinerary ENABLE ROW LEVEL SECURITY;
  
  -- =============================================
  -- POLITIQUES POUR pack_categories
  -- =============================================
  
  -- Lecture publique des cat√©gories actives (pour le catalogue public)
  CREATE POLICY "allow_read_categories_public" ON pack_categories
    FOR SELECT USING (true); -- Toutes les cat√©gories sont lisibles publiquement
  
  -- =============================================
  -- POLITIQUES POUR packs
  -- =============================================
  
  -- Lecture publique des packs actifs (pour le catalogue public)
  CREATE POLICY "allow_read_active_packs_public" ON packs
    FOR SELECT USING (status = 'active');
  
  -- =============================================
  -- POLITIQUES POUR pack_images, pack_services, pack_itinerary
  -- =============================================
  
  -- Lecture publique des donn√©es li√©es aux packs actifs
  CREATE POLICY "allow_read_pack_images_public" ON pack_images
    FOR SELECT USING (
      EXISTS (
        SELECT 1 FROM packs 
        WHERE packs.id = pack_images.pack_id AND packs.status = 'active'
      )
    );
    
  CREATE POLICY "allow_read_pack_services_public" ON pack_services
    FOR SELECT USING (
      EXISTS (
        SELECT 1 FROM packs 
        WHERE packs.id = pack_services.pack_id AND packs.status = 'active'
      )
    );
    
  CREATE POLICY "allow_read_pack_itinerary_public" ON pack_itinerary
    FOR SELECT USING (
      EXISTS (
        SELECT 1 FROM packs 
        WHERE packs.id = pack_itinerary.pack_id AND packs.status = 'active'
      )
    );
  
  -- =============================================
  -- POLITIQUES ADMIN SELON L'ARCHITECTURE
  -- =============================================
  
  IF arch_info.architecture_type = 'users_unified' THEN
    -- Architecture avec r√¥le dans users
    RAISE NOTICE '- Politiques admin pour: users unifi√©e (r√¥le dans users)';
    
    CREATE POLICY "allow_admin_all_pack_categories_users" ON pack_categories
      FOR ALL USING (
        EXISTS (
          SELECT 1 FROM users 
          WHERE id = auth.uid() AND role = 'admin'
        )
      );
    
    CREATE POLICY "allow_admin_all_packs_users" ON packs
      FOR ALL USING (
        EXISTS (
          SELECT 1 FROM users 
          WHERE id = auth.uid() AND role = 'admin'
        )
      );
      
    CREATE POLICY "allow_admin_all_pack_images_users" ON pack_images
      FOR ALL USING (
        EXISTS (
          SELECT 1 FROM users 
          WHERE id = auth.uid() AND role = 'admin'
        )
      );
      
    CREATE POLICY "allow_admin_all_pack_services_users" ON pack_services
      FOR ALL USING (
        EXISTS (
          SELECT 1 FROM users 
          WHERE id = auth.uid() AND role = 'admin'
        )
      );
      
    CREATE POLICY "allow_admin_all_pack_itinerary_users" ON pack_itinerary
      FOR ALL USING (
        EXISTS (
          SELECT 1 FROM users 
          WHERE id = auth.uid() AND role = 'admin'
        )
      );
      
  ELSIF arch_info.architecture_type = 'users_profiles_split' THEN
    -- Architecture avec r√¥le dans profiles
    RAISE NOTICE '- Politiques admin pour: users + profiles s√©par√©es (r√¥le dans profiles)';
    
    CREATE POLICY "allow_admin_all_pack_categories_profiles" ON pack_categories
      FOR ALL USING (
        EXISTS (
          SELECT 1 FROM profiles 
          WHERE user_id = auth.uid() AND role = 'admin'
        )
      );
    
    CREATE POLICY "allow_admin_all_packs_profiles" ON packs
      FOR ALL USING (
        EXISTS (
          SELECT 1 FROM profiles 
          WHERE user_id = auth.uid() AND role = 'admin'
        )
      );
      
    CREATE POLICY "allow_admin_all_pack_images_profiles" ON pack_images
      FOR ALL USING (
        EXISTS (
          SELECT 1 FROM profiles 
          WHERE user_id = auth.uid() AND role = 'admin'
        )
      );
      
    CREATE POLICY "allow_admin_all_pack_services_profiles" ON pack_services
      FOR ALL USING (
        EXISTS (
          SELECT 1 FROM profiles 
          WHERE user_id = auth.uid() AND role = 'admin'
        )
      );
      
    CREATE POLICY "allow_admin_all_pack_itinerary_profiles" ON pack_itinerary
      FOR ALL USING (
        EXISTS (
          SELECT 1 FROM profiles 
          WHERE user_id = auth.uid() AND role = 'admin'
        )
      );
      
  ELSIF arch_info.architecture_type = 'hybrid' THEN
    -- Architecture hybride (r√¥le dans les deux)
    RAISE NOTICE '- Politiques admin pour: hybride (r√¥le dans users ET profiles)';
    
    CREATE POLICY "allow_admin_all_pack_categories_hybrid" ON pack_categories
      FOR ALL USING (
        EXISTS (
          SELECT 1 FROM users 
          WHERE id = auth.uid() AND role = 'admin'
        ) OR EXISTS (
          SELECT 1 FROM profiles 
          WHERE user_id = auth.uid() AND role = 'admin'
        )
      );
    
    CREATE POLICY "allow_admin_all_packs_hybrid" ON packs
      FOR ALL USING (
        EXISTS (
          SELECT 1 FROM users 
          WHERE id = auth.uid() AND role = 'admin'
        ) OR EXISTS (
          SELECT 1 FROM profiles 
          WHERE user_id = auth.uid() AND role = 'admin'
        )
      );
      
    CREATE POLICY "allow_admin_all_pack_images_hybrid" ON pack_images
      FOR ALL USING (
        EXISTS (
          SELECT 1 FROM users 
          WHERE id = auth.uid() AND role = 'admin'
        ) OR EXISTS (
          SELECT 1 FROM profiles 
          WHERE user_id = auth.uid() AND role = 'admin'
        )
      );
      
    CREATE POLICY "allow_admin_all_pack_services_hybrid" ON pack_services
      FOR ALL USING (
        EXISTS (
          SELECT 1 FROM users 
          WHERE id = auth.uid() AND role = 'admin'
        ) OR EXISTS (
          SELECT 1 FROM profiles 
          WHERE user_id = auth.uid() AND role = 'admin'
        )
      );
      
    CREATE POLICY "allow_admin_all_pack_itinerary_hybrid" ON pack_itinerary
      FOR ALL USING (
        EXISTS (
          SELECT 1 FROM users 
          WHERE id = auth.uid() AND role = 'admin'
        ) OR EXISTS (
          SELECT 1 FROM profiles 
          WHERE user_id = auth.uid() AND role = 'admin'
        )
      );
      
  ELSE
    -- Architecture basique ou inconnue (acc√®s via raw_user_meta_data)
    RAISE NOTICE '- Politiques admin pour: basique/inconnue (m√©tadonn√©es auth)';
    
    CREATE POLICY "allow_admin_all_pack_categories_metadata" ON pack_categories
      FOR ALL USING (
        (auth.jwt() ->> 'role') = 'admin' OR
        (auth.jwt() -> 'user_metadata' ->> 'role') = 'admin'
      );
    
    CREATE POLICY "allow_admin_all_packs_metadata" ON packs
      FOR ALL USING (
        (auth.jwt() ->> 'role') = 'admin' OR
        (auth.jwt() -> 'user_metadata' ->> 'role') = 'admin'
      );
      
    CREATE POLICY "allow_admin_all_pack_images_metadata" ON pack_images
      FOR ALL USING (
        (auth.jwt() ->> 'role') = 'admin' OR
        (auth.jwt() -> 'user_metadata' ->> 'role') = 'admin'
      );
      
    CREATE POLICY "allow_admin_all_pack_services_metadata" ON pack_services
      FOR ALL USING (
        (auth.jwt() ->> 'role') = 'admin' OR
        (auth.jwt() -> 'user_metadata' ->> 'role') = 'admin'
      );
      
    CREATE POLICY "allow_admin_all_pack_itinerary_metadata" ON pack_itinerary
      FOR ALL USING (
        (auth.jwt() ->> 'role') = 'admin' OR
        (auth.jwt() -> 'user_metadata' ->> 'role') = 'admin'
      );
  END IF;
  
  RAISE NOTICE '‚úÖ Politiques RLS cr√©√©es selon architecture d√©tect√©e';
END $$;

-- üìä PHASE 8: DONN√âES D'EXEMPLE
-- ==============================

-- Ins√©rer les cat√©gories d'exemple
INSERT INTO pack_categories (name, description, icon) VALUES 
('Aventure', 'Exp√©riences palpitantes et sports extr√™mes', 'üèîÔ∏è'),
('Culture', 'D√©couverte du patrimoine et des traditions', 'üèõÔ∏è'),
('Nature', 'Immersion dans la faune et la flore', 'üåø'),
('Plage', 'D√©tente et activit√©s baln√©aires', 'üèñÔ∏è'),
('Gastronomie', 'D√©couverte de la cuisine locale', 'üçΩÔ∏è'),
('Randonn√©e', 'Treks et marches en pleine nature', 'ü•æ');

-- R√©cup√©rer les IDs des cat√©gories pour les packs
DO $$
DECLARE
  cat_adventure_id UUID;
  cat_culture_id UUID;
  cat_nature_id UUID;
  cat_beach_id UUID;
  pack_andasibe_id UUID;
  pack_tsingy_id UUID;
  pack_nosy_be_id UUID;
  admin_user_id UUID;
BEGIN
  -- R√©cup√©rer les IDs des cat√©gories
  SELECT id INTO cat_adventure_id FROM pack_categories WHERE name = 'Aventure';
  SELECT id INTO cat_culture_id FROM pack_categories WHERE name = 'Culture';
  SELECT id INTO cat_nature_id FROM pack_categories WHERE name = 'Nature';
  SELECT id INTO cat_beach_id FROM pack_categories WHERE name = 'Plage';
  
  -- Essayer de r√©cup√©rer un utilisateur admin (flexible selon l'architecture)
  BEGIN
    SELECT id INTO admin_user_id FROM users WHERE email LIKE '%admin%' LIMIT 1;
  EXCEPTION WHEN OTHERS THEN
    admin_user_id := NULL;
  END;
  
  IF admin_user_id IS NULL THEN
    BEGIN
      SELECT id INTO admin_user_id FROM users LIMIT 1; -- Prendre n'importe quel utilisateur
    EXCEPTION WHEN OTHERS THEN
      admin_user_id := NULL;
    END;
  END IF;
  
  -- Ins√©rer les packs d'exemple
  INSERT INTO packs (
    title, description, short_description, price, currency, duration_days,
    max_participants, min_participants, location, coordinates_lat, coordinates_lng,
    category_id, status, difficulty_level, season_start, season_end,
    cancellation_policy, created_by
  ) VALUES 
  (
    'Safari Andasibe-Mantadia',
    'D√©couvrez les l√©muriens embl√©matiques de Madagascar dans leur habitat naturel. Une exp√©rience inoubliable au c≈ìur de la for√™t tropicale humide.',
    'Safari l√©muriens dans la for√™t d''Andasibe',
    280000, 'MGA', 3, 8, 2,
    'Andasibe-Mantadia, Madagascar', -18.9441, 48.4245,
    cat_nature_id, 'active', 'medium', '04-01', '11-30',
    'Annulation gratuite jusqu''√† 7 jours avant',
    admin_user_id
  ),
  (
    'Exp√©dition Tsingy de Bemaraha',
    'Aventure exceptionnelle dans les formations rocheuses uniques des Tsingy. Escalade, tyrolienne et d√©couverte d''un √©cosyst√®me unique au monde.',
    'Aventure dans les formations rocheuses des Tsingy',
    450000, 'MGA', 5, 6, 2,
    'Tsingy de Bemaraha, Madagascar', -19.1347, 44.7844,
    cat_adventure_id, 'active', 'hard', '05-01', '10-31',
    'Annulation avec frais selon conditions m√©t√©o',
    admin_user_id
  ),
  (
    'D√©tente √† Nosy Be',
    'S√©jour paradisiaque sur l''√Æle aux parfums. Plages de sable blanc, eaux cristallines et couchers de soleil spectaculaires.',
    'S√©jour d√©tente sur l''√Æle aux parfums',
    320000, 'MGA', 4, 12, 1,
    'Nosy Be, Madagascar', -13.3205, 48.2613,
    cat_beach_id, 'active', 'easy', '03-01', '12-31',
    'Annulation gratuite jusqu''√† 3 jours avant',
    admin_user_id
  )
  RETURNING id INTO pack_andasibe_id, pack_tsingy_id, pack_nosy_be_id;
  
  -- Ins√©rer des images d'exemple (Unsplash)
  INSERT INTO pack_images (pack_id, image_url, alt_text, display_order, is_primary) VALUES
  -- Pack Andasibe
  ((SELECT id FROM packs WHERE title = 'Safari Andasibe-Mantadia'), 'https://images.unsplash.com/photo-1564760055775-d63b17a55c44', 'L√©murien dans la for√™t d''Andasibe', 1, true),
  ((SELECT id FROM packs WHERE title = 'Safari Andasibe-Mantadia'), 'https://images.unsplash.com/photo-1547036967-23d11aacaee0', 'For√™t tropicale Madagascar', 2, false),
  
  -- Pack Tsingy  
  ((SELECT id FROM packs WHERE title = 'Exp√©dition Tsingy de Bemaraha'), 'https://images.unsplash.com/photo-1578662996442-48f60103fc96', 'Formations rocheuses Tsingy', 1, true),
  ((SELECT id FROM packs WHERE title = 'Exp√©dition Tsingy de Bemaraha'), 'https://images.unsplash.com/photo-1506905925346-21bda4d32df4', 'Escalade dans les Tsingy', 2, false),
  
  -- Pack Nosy Be
  ((SELECT id FROM packs WHERE title = 'D√©tente √† Nosy Be'), 'https://images.unsplash.com/photo-1559827260-dc66d52bef19', 'Plage paradisiaque Nosy Be', 1, true),
  ((SELECT id FROM packs WHERE title = 'D√©tente √† Nosy Be'), 'https://images.unsplash.com/photo-1571104508999-893933ded431', 'Coucher de soleil Nosy Be', 2, false);
  
  -- Ins√©rer des services inclus/exclus
  INSERT INTO pack_services (pack_id, service_name, is_included, display_order) VALUES
  -- Pack Andasibe - Services inclus
  ((SELECT id FROM packs WHERE title = 'Safari Andasibe-Mantadia'), 'Transport', true, 1),
  ((SELECT id FROM packs WHERE title = 'Safari Andasibe-Mantadia'), 'Guide local', true, 2),
  ((SELECT id FROM packs WHERE title = 'Safari Andasibe-Mantadia'), 'H√©bergement', true, 3),
  ((SELECT id FROM packs WHERE title = 'Safari Andasibe-Mantadia'), 'Repas', true, 4),
  ((SELECT id FROM packs WHERE title = 'Safari Andasibe-Mantadia'), 'Entr√©es parcs', true, 5),
  -- Pack Andasibe - Services exclus
  ((SELECT id FROM packs WHERE title = 'Safari Andasibe-Mantadia'), 'Vols internationaux', false, 1),
  ((SELECT id FROM packs WHERE title = 'Safari Andasibe-Mantadia'), 'Assurance voyage', false, 2),
  ((SELECT id FROM packs WHERE title = 'Safari Andasibe-Mantadia'), 'Pourboires', false, 3),
  
  -- Pack Tsingy - Services inclus
  ((SELECT id FROM packs WHERE title = 'Exp√©dition Tsingy de Bemaraha'), 'Transport 4x4', true, 1),
  ((SELECT id FROM packs WHERE title = 'Exp√©dition Tsingy de Bemaraha'), 'Guide sp√©cialis√©', true, 2),
  ((SELECT id FROM packs WHERE title = 'Exp√©dition Tsingy de Bemaraha'), '√âquipement escalade', true, 3),
  ((SELECT id FROM packs WHERE title = 'Exp√©dition Tsingy de Bemaraha'), 'Camping', true, 4),
  ((SELECT id FROM packs WHERE title = 'Exp√©dition Tsingy de Bemaraha'), 'Repas', true, 5),
  -- Pack Tsingy - Services exclus
  ((SELECT id FROM packs WHERE title = 'Exp√©dition Tsingy de Bemaraha'), 'Vols domestiques', false, 1),
  ((SELECT id FROM packs WHERE title = 'Exp√©dition Tsingy de Bemaraha'), '√âquipement personnel', false, 2),
  ((SELECT id FROM packs WHERE title = 'Exp√©dition Tsingy de Bemaraha'), 'Assurance', false, 3),
  
  -- Pack Nosy Be - Services inclus
  ((SELECT id FROM packs WHERE title = 'D√©tente √† Nosy Be'), 'H√©bergement bord de mer', true, 1),
  ((SELECT id FROM packs WHERE title = 'D√©tente √† Nosy Be'), 'Petits d√©jeuners', true, 2),
  ((SELECT id FROM packs WHERE title = 'D√©tente √† Nosy Be'), 'Excursions √Æles', true, 3),
  ((SELECT id FROM packs WHERE title = 'D√©tente √† Nosy Be'), 'Transferts', true, 4),
  -- Pack Nosy Be - Services exclus
  ((SELECT id FROM packs WHERE title = 'D√©tente √† Nosy Be'), 'Vols', false, 1),
  ((SELECT id FROM packs WHERE title = 'D√©tente √† Nosy Be'), 'D√©jeuners et d√Æners', false, 2),
  ((SELECT id FROM packs WHERE title = 'D√©tente √† Nosy Be'), 'Activit√©s nautiques payantes', false, 3);
  
  -- Ins√©rer des itin√©raires d'exemple
  INSERT INTO pack_itinerary (pack_id, day_number, title, description, activities, accommodation, meals_included) VALUES
  -- Itin√©raire Pack Andasibe (3 jours)
  ((SELECT id FROM packs WHERE title = 'Safari Andasibe-Mantadia'), 1, 'Arriv√©e et premi√®re d√©couverte', 'Accueil √† Antananarivo et route vers Andasibe', ARRAY['Transfert depuis Antananarivo', 'Installation √† l''h√¥tel', 'Premi√®re balade nocturne'], 'H√¥tel Andasibe', 'D√Æner'),
  ((SELECT id FROM packs WHERE title = 'Safari Andasibe-Mantadia'), 2, 'Safari dans le parc national', 'Journ√©e compl√®te d''exploration de la r√©serve', ARRAY['Safari matinal', 'Observation des l√©muriens Indri', 'Randonn√©e dans la for√™t primaire'], 'H√¥tel Andasibe', 'Petit-d√©jeuner, D√©jeuner, D√Æner'),
  ((SELECT id FROM packs WHERE title = 'Safari Andasibe-Mantadia'), 3, 'Derni√®res observations et retour', 'Derni√®re matin√©e dans le parc et retour', ARRAY['Safari matinal', 'Visite village local', 'Retour Antananarivo'], 'Vol retour', 'Petit-d√©jeuner, D√©jeuner'),
  
  -- Itin√©raire Pack Tsingy (5 jours)
  ((SELECT id FROM packs WHERE title = 'Exp√©dition Tsingy de Bemaraha'), 1, 'D√©part vers les Tsingy', 'Route vers le parc national', ARRAY['Vol vers Morondava', 'Route 4x4 vers Bekopaka', 'Installation campement'], 'Campement Bekopaka', 'D√Æner'),
  ((SELECT id FROM packs WHERE title = 'Exp√©dition Tsingy de Bemaraha'), 2, 'Petits Tsingy', 'D√©couverte des petites formations', ARRAY['Randonn√©e Petits Tsingy', 'Initiation escalade', 'Via ferrata d√©butant'], 'Campement Bekopaka', 'Petit-d√©jeuner, D√©jeuner, D√Æner'),
  ((SELECT id FROM packs WHERE title = 'Exp√©dition Tsingy de Bemaraha'), 3, 'Grands Tsingy', 'Aventure dans les grandes formations', ARRAY['Escalade Grands Tsingy', 'Tyrolienne', 'Exploration grottes'], 'Campement Bekopaka', 'Petit-d√©jeuner, D√©jeuner, D√Æner'),
  ((SELECT id FROM packs WHERE title = 'Exp√©dition Tsingy de Bemaraha'), 4, 'For√™t de baobabs', 'D√©couverte de l''avenue des baobabs', ARRAY['Lever de soleil sur les Tsingy', 'Route vers Morondava', 'Coucher de soleil baobabs'], 'H√¥tel Morondava', 'Petit-d√©jeuner, D√©jeuner, D√Æner'),
  ((SELECT id FROM packs WHERE title = 'Exp√©dition Tsingy de Bemaraha'), 5, 'Retour', 'Vol retour vers Antananarivo', ARRAY['Derni√®re visite Morondava', 'Vol retour'], 'Vol retour', 'Petit-d√©jeuner'),
  
  -- Itin√©raire Pack Nosy Be (4 jours)  
  ((SELECT id FROM packs WHERE title = 'D√©tente √† Nosy Be'), 1, 'Arriv√©e √† Nosy Be', 'Installation et premi√®re d√©couverte', ARRAY['Vol vers Nosy Be', 'Installation resort', 'D√©tente plage'], 'Resort bord de mer', 'D√Æner'),
  ((SELECT id FROM packs WHERE title = 'D√©tente √† Nosy Be'), 2, 'Tour de l''√Æle', 'Exploration de Nosy Be', ARRAY['Visite Hell-Ville', 'Distillerie ylang-ylang', 'Plage Andilana'], 'Resort bord de mer', 'Petit-d√©jeuner, D√©jeuner'),
  ((SELECT id FROM packs WHERE title = 'D√©tente √† Nosy Be'), 3, 'Excursion √Æles voisines', 'D√©couverte Nosy Komba et Nosy Tanikely', ARRAY['Excursion bateau', 'Snorkeling Nosy Tanikely', 'Village Nosy Komba'], 'Resort bord de mer', 'Petit-d√©jeuner, D√©jeuner'),
  ((SELECT id FROM packs WHERE title = 'D√©tente √† Nosy Be'), 4, 'D√©part', 'Derni√®re matin√©e et vol retour', ARRAY['D√©tente matinale', 'Shopping souvenirs', 'Vol retour'], 'Vol retour', 'Petit-d√©jeuner');
  
  RAISE NOTICE '‚úÖ Donn√©es d''exemple ins√©r√©es avec succ√®s';
END $$;

-- üéâ V√âRIFICATION FINALE
-- =======================

SELECT 
  'üéâ TABLES PACKS CR√â√âES AVEC SUCC√àS !' as message,
  (SELECT COUNT(*) FROM pack_categories) as categories_count,
  (SELECT COUNT(*) FROM packs) as packs_count,
  (SELECT COUNT(*) FROM pack_images) as images_count,
  (SELECT COUNT(*) FROM pack_services) as services_count,
  (SELECT COUNT(*) FROM pack_itinerary) as itinerary_count;

-- Afficher l'architecture utilis√©e
SELECT 
  'üìã ARCHITECTURE D√âTECT√âE ET UTILIS√âE:' as info,
  architecture_type,
  'R√¥le dans users: ' || users_has_role as users_role,
  'Profiles existe: ' || profiles_exists as profiles,
  'R√¥le dans profiles: ' || profiles_has_role as profiles_role
FROM detected_architecture;

-- Test des politiques RLS
SELECT 
  'üîê POLITIQUES RLS CR√â√âES:' as info,
  tablename,
  COUNT(*) as policies_count
FROM pg_policies 
WHERE tablename LIKE 'pack%'
GROUP BY tablename
ORDER BY tablename;

-- Afficher les packs cr√©√©s avec leurs relations
SELECT 
  'üìä PACKS CR√â√âS AVEC RELATIONS:' as info,
  p.title,
  pc.name as category,
  p.status,
  p.difficulty_level,
  p.price,
  (SELECT COUNT(*) FROM pack_images pi WHERE pi.pack_id = p.id) as images_count,
  (SELECT COUNT(*) FROM pack_services ps WHERE ps.pack_id = p.id AND ps.is_included = true) as included_services_count,
  (SELECT COUNT(*) FROM pack_itinerary pit WHERE pit.pack_id = p.id) as itinerary_days_count
FROM packs p
LEFT JOIN pack_categories pc ON p.category_id = pc.id
ORDER BY p.created_at DESC;

-- Nettoyage table temporaire
DROP TABLE IF EXISTS detected_architecture;

-- Message final
SELECT '‚úÖ SCRIPT PACKS SUPABASE COMPLET TERMIN√â AVEC SUCC√àS !' as final_status;