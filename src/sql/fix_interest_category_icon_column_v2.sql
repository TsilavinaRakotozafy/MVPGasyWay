-- R√©parer la colonne icon dans la table interest_category
-- Ce script v√©rifie et corrige les probl√®mes avec la colonne icon

-- 1. V√©rifier si la table interest_category existe
DO $$
BEGIN
    IF NOT EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'interest_category') THEN
        RAISE NOTICE 'Table interest_category n''existe pas. Cr√©ation...';
        
        CREATE TABLE interest_category (
            id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
            name VARCHAR(100) NOT NULL UNIQUE,
            icon TEXT, -- Emoji ou code d'ic√¥ne
            description TEXT,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT now()
        );
        
        RAISE NOTICE 'Table interest_category cr√©√©e avec succ√®s';
    ELSE
        RAISE NOTICE 'Table interest_category existe d√©j√†';
    END IF;
END $$;

-- 2. V√©rifier si la colonne icon existe, sinon l'ajouter
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'interest_category' 
        AND column_name = 'icon'
    ) THEN
        RAISE NOTICE 'Colonne icon manquante. Ajout...';
        ALTER TABLE interest_category ADD COLUMN icon TEXT;
        RAISE NOTICE 'Colonne icon ajout√©e avec succ√®s';
    ELSE
        RAISE NOTICE 'Colonne icon existe d√©j√†';
    END IF;
END $$;

-- 3. Ins√©rer des donn√©es de base si la table est vide
INSERT INTO interest_category (name, icon, description) VALUES 
    ('Gastronomie', 'üç¥', 'D√©couvertes culinaires et gastronomiques'),
    ('Artisanat', 'üé®', 'Arts et artisanat traditionnels'),
    ('Culture', 'üåÑ', 'Immersion culturelle et traditions'),
    ('Nature', 'üåø', 'D√©couverte de la nature et √©cotourisme'),
    ('Agriculture', 'üç´', 'Agriculture durable et produits locaux'),
    ('Aventure', 'üèîÔ∏è', 'Activit√©s d''aventure et sports'),
    ('Plage', 'üèñÔ∏è', 'D√©tente et activit√©s baln√©aires')
ON CONFLICT (name) DO UPDATE SET
    icon = EXCLUDED.icon,
    description = EXCLUDED.description,
    updated_at = now();

-- 4. V√©rifier les permissions RLS
DO $$
BEGIN
    -- Activer RLS si pas d√©j√† fait
    ALTER TABLE interest_category ENABLE ROW LEVEL SECURITY;
    
    -- Politique pour lecture publique
    DROP POLICY IF EXISTS "interest_category_select_policy" ON interest_category;
    CREATE POLICY "interest_category_select_policy" ON interest_category
        FOR SELECT TO authenticated, anon
        USING (true);
    
    -- Politique pour modification par les admins seulement
    DROP POLICY IF EXISTS "interest_category_admin_policy" ON interest_category;
    CREATE POLICY "interest_category_admin_policy" ON interest_category
        FOR ALL TO authenticated
        USING (
            EXISTS (
                SELECT 1 FROM users 
                WHERE users.id = auth.uid() 
                AND users.role = 'admin'
            )
        );
    
    RAISE NOTICE 'Politiques RLS configur√©es pour interest_category';
END $$;

-- 5. Cr√©er un index pour am√©liorer les performances
CREATE INDEX IF NOT EXISTS idx_interest_category_name ON interest_category(name);

-- 6. Afficher un r√©sum√©
DO $$
DECLARE
    category_count INTEGER;
BEGIN
    SELECT COUNT(*) INTO category_count FROM interest_category;
    RAISE NOTICE 'Script termin√©. Nombre de cat√©gories d''int√©r√™t: %', category_count;
    
    -- Afficher quelques exemples
    RAISE NOTICE 'Exemples de cat√©gories:';
    FOR rec IN (
        SELECT name, icon, description 
        FROM interest_category 
        ORDER BY name 
        LIMIT 5
    ) LOOP
        RAISE NOTICE '- % % : %', rec.icon, rec.name, rec.description;
    END LOOP;
END $$;