-- =============================================
-- SCRIPT CORRECTEUR COMPLET : SYST√àME D'AVIS GASYWAY
-- Corrige TOUS les probl√®mes identifi√©s en une seule ex√©cution
-- =============================================

BEGIN;

DO $$
BEGIN
    RAISE NOTICE 'üöÄ CORRECTION COMPL√àTE DU SYST√àME D''AVIS GASYWAY';
    RAISE NOTICE '==============================================';
    RAISE NOTICE 'Ce script va:';
    RAISE NOTICE '  1. Corriger la structure de la table reviews';
    RAISE NOTICE '  2. Migrer les donn√©es de pack_reviews si n√©cessaire';
    RAISE NOTICE '  3. Configurer les politiques RLS';
    RAISE NOTICE '  4. Cr√©er des utilisateurs demo si n√©cessaire';
    RAISE NOTICE '  5. G√©n√©rer des avis de test r√©alistes';
    RAISE NOTICE '';
END $$;

-- ==============================
-- 1. CORRECTION DE LA STRUCTURE DE LA TABLE REVIEWS
-- ==============================

DO $$
DECLARE
    reviews_exists BOOLEAN;
    pack_reviews_exists BOOLEAN;
    pack_reviews_count INTEGER := 0;
BEGIN
    RAISE NOTICE 'üîß 1. CORRECTION DE LA STRUCTURE DE LA TABLE REVIEWS...';
    
    -- V√©rifier l'existence des tables
    SELECT EXISTS (
        SELECT 1 FROM information_schema.tables 
        WHERE table_name = 'reviews' AND table_schema = 'public'
    ) INTO reviews_exists;
    
    SELECT EXISTS (
        SELECT 1 FROM information_schema.tables 
        WHERE table_name = 'pack_reviews' AND table_schema = 'public'
    ) INTO pack_reviews_exists;
    
    IF pack_reviews_exists THEN
        SELECT COUNT(*) INTO pack_reviews_count FROM pack_reviews;
    END IF;
    
    -- Cr√©er la table reviews si elle n'existe pas
    IF NOT reviews_exists THEN
        CREATE TABLE reviews (
            id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
            user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
            pack_id UUID NOT NULL REFERENCES packs(id) ON DELETE CASCADE,
            booking_id UUID REFERENCES bookings(id) ON DELETE SET NULL,
            rating INTEGER NOT NULL CHECK (rating >= 1 AND rating <= 5),
            title TEXT,
            comment TEXT NOT NULL,
            status TEXT DEFAULT 'approved' CHECK (status IN ('pending', 'approved', 'rejected')),
            created_at TIMESTAMPTZ DEFAULT NOW(),
            updated_at TIMESTAMPTZ DEFAULT NOW(),
            
            -- Contrainte pour √©viter les doublons
            UNIQUE(user_id, pack_id)
        );
        
        -- Index pour performances
        CREATE INDEX IF NOT EXISTS idx_reviews_pack_id ON reviews(pack_id);
        CREATE INDEX IF NOT EXISTS idx_reviews_user_id ON reviews(user_id);
        CREATE INDEX IF NOT EXISTS idx_reviews_status ON reviews(status);
        CREATE INDEX IF NOT EXISTS idx_reviews_rating ON reviews(rating);
        CREATE INDEX IF NOT EXISTS idx_reviews_created_at ON reviews(created_at);
        
        RAISE NOTICE '‚úÖ Table reviews cr√©√©e avec succ√®s !';
    ELSE
        -- V√©rifier et ajouter les colonnes manquantes
        IF NOT EXISTS (
            SELECT 1 FROM information_schema.columns 
            WHERE table_name = 'reviews' AND column_name = 'status'
        ) THEN
            ALTER TABLE reviews ADD COLUMN status TEXT DEFAULT 'approved' CHECK (status IN ('pending', 'approved', 'rejected'));
            RAISE NOTICE '‚úÖ Colonne status ajout√©e';
        END IF;
        
        IF NOT EXISTS (
            SELECT 1 FROM information_schema.columns 
            WHERE table_name = 'reviews' AND column_name = 'title'
        ) THEN
            ALTER TABLE reviews ADD COLUMN title TEXT;
            RAISE NOTICE '‚úÖ Colonne title ajout√©e';
        END IF;
        
        IF NOT EXISTS (
            SELECT 1 FROM information_schema.columns 
            WHERE table_name = 'reviews' AND column_name = 'booking_id'
        ) THEN
            ALTER TABLE reviews ADD COLUMN booking_id UUID;
            -- Ajouter la foreign key si la table bookings existe
            IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'bookings') THEN
                ALTER TABLE reviews ADD CONSTRAINT fk_reviews_booking 
                FOREIGN KEY (booking_id) REFERENCES bookings(id) ON DELETE SET NULL;
            END IF;
            RAISE NOTICE '‚úÖ Colonne booking_id ajout√©e';
        END IF;
        
        RAISE NOTICE '‚úÖ Table reviews v√©rifi√©e';
    END IF;
    
    -- Migrer les donn√©es de pack_reviews vers reviews
    IF pack_reviews_exists AND pack_reviews_count > 0 THEN
        RAISE NOTICE 'üîÑ Migration des donn√©es pack_reviews -> reviews...';
        
        INSERT INTO reviews (
            user_id, pack_id, rating, title, comment, status, created_at, updated_at
        )
        SELECT 
            user_id, 
            pack_id, 
            rating, 
            title,
            comment,
            COALESCE(status, 'approved'),
            COALESCE(created_at, NOW()),
            COALESCE(updated_at, NOW())
        FROM pack_reviews
        ON CONFLICT (user_id, pack_id) DO NOTHING;
        
        RAISE NOTICE '‚úÖ Migration termin√©e !';
    END IF;
    
END $$;

-- ==============================
-- 2. CONFIGURATION DES POLITIQUES RLS
-- ==============================

DO $$
BEGIN
    RAISE NOTICE 'üîí 2. CONFIGURATION DES POLITIQUES RLS...';
    
    -- Activer RLS sur reviews
    ALTER TABLE reviews ENABLE ROW LEVEL SECURITY;
    
    -- Politique : Lecture publique pour les avis approuv√©s
    DROP POLICY IF EXISTS "reviews_select_public" ON reviews;
    CREATE POLICY "reviews_select_public" 
    ON reviews FOR SELECT 
    USING (status = 'approved');
    
    -- Politique : Insertion par l'utilisateur authentifi√©
    DROP POLICY IF EXISTS "reviews_insert_own" ON reviews;
    CREATE POLICY "reviews_insert_own" 
    ON reviews FOR INSERT 
    WITH CHECK (user_id = auth.uid());
    
    -- Politique : Modification par le propri√©taire
    DROP POLICY IF EXISTS "reviews_update_own" ON reviews;
    CREATE POLICY "reviews_update_own" 
    ON reviews FOR UPDATE 
    USING (user_id = auth.uid());
    
    -- Politique : Admin peut tout faire
    DROP POLICY IF EXISTS "reviews_admin_all" ON reviews;
    CREATE POLICY "reviews_admin_all" 
    ON reviews FOR ALL 
    USING (
        EXISTS (
            SELECT 1 FROM users 
            WHERE users.id = auth.uid() 
            AND users.role = 'admin'
        )
    );
    
    -- Trigger de mise √† jour automatique
    CREATE OR REPLACE FUNCTION update_reviews_updated_at()
    RETURNS TRIGGER AS $$
    BEGIN
        NEW.updated_at = NOW();
        RETURN NEW;
    END;
    $$ LANGUAGE plpgsql;
    
    DROP TRIGGER IF EXISTS trigger_update_reviews_updated_at ON reviews;
    CREATE TRIGGER trigger_update_reviews_updated_at
        BEFORE UPDATE ON reviews
        FOR EACH ROW
        EXECUTE FUNCTION update_reviews_updated_at();
    
    RAISE NOTICE '‚úÖ Politiques RLS configur√©es !';
END $$;

-- ==============================
-- 3. CR√âATION D'UTILISATEURS DEMO
-- ==============================

DO $$
DECLARE
    demo_users TEXT[] := ARRAY[
        'marie.dubois@demo.mg',
        'jean.martin@demo.mg', 
        'sophie.bernard@demo.mg',
        'paul.moreau@demo.mg',
        'claire.simon@demo.mg',
        'antoine.rousseau@demo.mg'
    ];
    demo_names TEXT[] := ARRAY[
        'Marie,Dubois',
        'Jean,Martin',
        'Sophie,Bernard', 
        'Paul,Moreau',
        'Claire,Simon',
        'Antoine,Rousseau'
    ];
    demo_email TEXT;
    demo_name TEXT;
    first_name TEXT;
    last_name TEXT;
    user_exists BOOLEAN;
    demo_user_id UUID;
    existing_demo_count INTEGER;
BEGIN
    RAISE NOTICE 'üë• 3. CR√âATION D''UTILISATEURS DEMO...';
    
    -- Compter les utilisateurs demo existants
    SELECT COUNT(*) INTO existing_demo_count 
    FROM users 
    WHERE email LIKE '%@demo.mg' AND role = 'voyageur' AND status = 'active';
    
    IF existing_demo_count >= 3 THEN
        RAISE NOTICE '‚úÖ Utilisateurs demo suffisants d√©j√† pr√©sents (%)', existing_demo_count;
    ELSE
        FOR i IN 1..array_length(demo_users, 1) LOOP
            demo_email := demo_users[i];
            demo_name := demo_names[i];
            first_name := split_part(demo_name, ',', 1);
            last_name := split_part(demo_name, ',', 2);
            
            -- V√©rifier si l'utilisateur existe d√©j√†
            SELECT EXISTS(SELECT 1 FROM users WHERE email = demo_email) INTO user_exists;
            
            IF NOT user_exists THEN
                demo_user_id := gen_random_uuid();
                
                INSERT INTO users (
                    id, email, first_name, last_name, phone, role, status,
                    first_login_completed, gdpr_consent, locale, created_at, updated_at, last_login
                ) VALUES (
                    demo_user_id, demo_email, first_name, last_name,
                    '+261340000' || LPAD((i*111)::TEXT, 3, '0'),
                    'voyageur', 'active', true, true, 'fr',
                    now() - (random() * interval '90 days'),
                    now(),
                    now() - (random() * interval '30 days')
                );
                
                RAISE NOTICE '‚úÖ Utilisateur demo cr√©√©: % %', first_name, last_name;
            END IF;
        END LOOP;
    END IF;
END $$;

-- ==============================
-- 4. G√âN√âRATION D'AVIS R√âALISTES
-- ==============================

DO $$
DECLARE
    pack_record RECORD;
    user_record RECORD;
    review_count INTEGER;
    rating_value INTEGER;
    review_titles TEXT[] := ARRAY[
        'Exp√©rience exceptionnelle !', 'Un voyage inoubliable', 'Magnifique d√©couverte',
        'Tr√®s bonne organisation', 'Guide fantastique', 'Paysages √† couper le souffle',
        'Service impeccable', 'Moments magiques', 'Parfait pour les familles',
        'Aventure de r√™ve', 'Culture authentique', 'Accueil chaleureux',
        'D√©pass√© mes attentes', 'Recommande vivement', 'Bien mais perfectible',
        'Correct dans l''ensemble', 'Quelques am√©liorations possibles', 'Moyen, peut mieux faire',
        'D√©cevant par rapport au prix', 'Pas √† la hauteur'
    ];
    review_comments TEXT[] := ARRAY[
        'Une exp√©rience absolument fantastique ! Notre guide √©tait tr√®s comp√©tent et les paysages sont √† couper le souffle.',
        'Voyage extraordinaire qui nous a permis de d√©couvrir la beaut√© authentique de Madagascar. Organisation parfaite.',
        'Les l√©muriens √©taient magnifiques et nous avons appris √©norm√©ment sur la faune locale. Moment inoubliable.',
        'Guide exceptionnel qui conna√Æt parfaitement la r√©gion. H√©bergements confortables et nourriture d√©licieuse.',
        'Aventure palpitante dans un cadre naturel exceptionnel. Les formations rocheuses sont impressionnantes.',
        'Service client irr√©prochable, itin√©raire bien pens√© et d√©couvertes culturelles enrichissantes.',
        'Parfait pour se d√©connecter et profiter de la nature. Les couchers de soleil sont magiques.',
        'Organisation impeccable, mat√©riel de qualit√© et √©quipe professionnelle. Exp√©dition m√©morable.',
        'D√©couverte authentique des traditions malgaches avec des rencontres humaines extraordinaires.',
        'Rapport qualit√©-prix excellent ! Activit√©s vari√©es et adapt√©es √† tous les niveaux.',
        'Tr√®s bonne exp√©rience m√™me si quelques points peuvent √™tre am√©lior√©s au niveau logistique.',
        'Bon voyage dans l''ensemble, guide sympa mais certaines activit√©s auraient pu √™tre mieux organis√©es.',
        'Exp√©rience correcte mais j''attendais un peu plus pour le prix. Paysages beaux mais h√©bergement basique.',
        'Bien mais sans plus. Organisation convenable, guide disponible mais manque d''animations le soir.',
        'Voyage agr√©able qui correspond √† la description. Quelques petits d√©sagr√©ments m√©t√©o.',
        'D√©cevant par rapport aux attentes. Guide pas tr√®s engageant et promesses non tenues.',
        'Service client √† am√©liorer, retards fr√©quents et communication d√©faillante.',
        'Prix trop √©lev√© pour ce qui est propos√©. Prestations correctes mais pas justifi√©es.',
        'Exp√©rience mitig√©e avec des hauts et des bas. Certains moments g√©niaux, d''autres moins.',
        'Correct sans √™tre exceptionnel. Fait le travail mais ne vous attendez pas √† √™tre √©merveill√©s.'
    ];
    random_title TEXT;
    random_comment TEXT;
    random_date TIMESTAMP;
    users_array UUID[];
    existing_reviews_count INTEGER;
BEGIN
    RAISE NOTICE 'üéØ 4. G√âN√âRATION D''AVIS R√âALISTES...';
    
    -- V√©rifier s'il y a d√©j√† des avis
    SELECT COUNT(*) INTO existing_reviews_count FROM reviews;
    
    IF existing_reviews_count > 20 THEN
        RAISE NOTICE '‚úÖ Avis suffisants d√©j√† pr√©sents (%)', existing_reviews_count;
        RETURN;
    END IF;
    
    -- R√©cup√©rer les utilisateurs voyageurs actifs
    SELECT ARRAY_AGG(id) INTO users_array
    FROM users
    WHERE role = 'voyageur' AND status = 'active';
    
    IF array_length(users_array, 1) IS NULL OR array_length(users_array, 1) = 0 THEN
        RAISE NOTICE '‚ö†Ô∏è Aucun utilisateur voyageur trouv√© pour cr√©er des avis';
        RETURN;
    END IF;
    
    -- Pour chaque pack actif
    FOR pack_record IN 
        SELECT id, title FROM packs WHERE status = 'active' LIMIT 10
    LOOP
        -- G√©n√©rer entre 3 et 7 avis par pack
        review_count := floor(random() * 5) + 3;
        
        FOR i IN 1..review_count LOOP
            -- S√©lectionner un utilisateur al√©atoire
            user_record := users_array[floor(random() * array_length(users_array, 1)) + 1];
            
            -- V√©rifier qu'il n'y a pas d√©j√† un avis
            IF EXISTS (
                SELECT 1 FROM reviews 
                WHERE user_id = user_record AND pack_id = pack_record.id
            ) THEN
                CONTINUE;
            END IF;
            
            -- Note r√©aliste (distribution weighted)
            CASE 
                WHEN random() < 0.45 THEN rating_value := 5  -- 45% de 5 √©toiles
                WHEN random() < 0.75 THEN rating_value := 4  -- 30% de 4 √©toiles  
                WHEN random() < 0.90 THEN rating_value := 3  -- 15% de 3 √©toiles
                WHEN random() < 0.97 THEN rating_value := 2  -- 7% de 2 √©toiles
                ELSE rating_value := 1                       -- 3% de 1 √©toile
            END CASE;
            
            -- Titre et commentaire selon la note
            IF rating_value >= 4 THEN
                random_title := review_titles[floor(random() * 14) + 1];
                random_comment := review_comments[floor(random() * 10) + 1];
            ELSIF rating_value = 3 THEN
                random_title := review_titles[floor(random() * 3) + 15];
                random_comment := review_comments[floor(random() * 5) + 11];
            ELSE
                random_title := review_titles[floor(random() * 3) + 18];
                random_comment := review_comments[floor(random() * 4) + 16];
            END IF;
            
            -- Date al√©atoire dans les 4 derniers mois
            random_date := now() - (random() * interval '120 days');
            
            -- Ins√©rer l'avis
            INSERT INTO reviews (
                user_id, pack_id, rating, title, comment, status, created_at, updated_at
            ) VALUES (
                user_record, pack_record.id, rating_value, random_title, 
                random_comment, 'approved', random_date, random_date
            );
            
        END LOOP;
    END LOOP;
    
    RAISE NOTICE '‚úÖ Avis r√©alistes g√©n√©r√©s !';
END $$;

COMMIT;

-- ==============================
-- 5. V√âRIFICATION FINALE
-- ==============================

DO $$
DECLARE
    total_reviews INTEGER;
    total_users INTEGER;
    total_packs INTEGER;
    avg_rating NUMERIC;
BEGIN
    RAISE NOTICE '';
    RAISE NOTICE 'üéâ CORRECTION COMPL√àTE TERMIN√âE !';
    RAISE NOTICE '=================================';
    RAISE NOTICE '';
    
    -- Statistiques finales
    SELECT COUNT(*) INTO total_reviews FROM reviews WHERE status = 'approved';
    SELECT COUNT(*) INTO total_users FROM users WHERE role = 'voyageur' AND status = 'active';
    SELECT COUNT(*) INTO total_packs FROM packs WHERE status = 'active';
    SELECT ROUND(AVG(rating::numeric), 1) INTO avg_rating FROM reviews WHERE status = 'approved';
    
    RAISE NOTICE 'üìä STATISTIQUES FINALES :';
    RAISE NOTICE '   ‚Ä¢ % avis approuv√©s', total_reviews;
    RAISE NOTICE '   ‚Ä¢ % utilisateurs voyageurs actifs', total_users;
    RAISE NOTICE '   ‚Ä¢ % packs actifs', total_packs;
    RAISE NOTICE '   ‚Ä¢ Moyenne globale : %/5', COALESCE(avg_rating, 0);
    RAISE NOTICE '';
    
    RAISE NOTICE '‚úÖ FONCTIONNALIT√âS OP√âRATIONNELLES :';
    RAISE NOTICE '   ‚Ä¢ Table reviews avec structure correcte';
    RAISE NOTICE '   ‚Ä¢ Politiques RLS configur√©es';
    RAISE NOTICE '   ‚Ä¢ Utilisateurs demo cr√©√©s';
    RAISE NOTICE '   ‚Ä¢ Avis r√©alistes g√©n√©r√©s';
    RAISE NOTICE '   ‚Ä¢ API backend compatible';
    RAISE NOTICE '';
    
    RAISE NOTICE 'üöÄ VOTRE SYST√àME D''AVIS EST MAINTENANT OP√âRATIONNEL !';
    RAISE NOTICE '';
    RAISE NOTICE 'üìù PROCHAINES √âTAPES :';
    RAISE NOTICE '   1. Testez la cr√©ation d''avis depuis l''interface';
    RAISE NOTICE '   2. V√©rifiez l''affichage des moyennes sur les packs';
    RAISE NOTICE '   3. Consultez les avis d√©taill√©s dans PackDetail';
    RAISE NOTICE '';
    
END $$;

-- Test final de la requ√™te API
SELECT 
    'TEST API: Requ√™te GET reviews' as test_type,
    COUNT(*) as total_avis_disponibles
FROM reviews r
JOIN users u ON r.user_id = u.id
WHERE r.status = 'approved';

SELECT 
    'TEST API: Exemple d''avis format√©' as test_type,
    r.id,
    CONCAT(u.first_name, ' ', UPPER(LEFT(u.last_name, 1)), '.') as user_name,
    r.rating,
    LEFT(r.comment, 50) || '...' as comment_preview,
    r.created_at::date as date
FROM reviews r
JOIN users u ON r.user_id = u.id
WHERE r.status = 'approved'
ORDER BY r.created_at DESC
LIMIT 3;