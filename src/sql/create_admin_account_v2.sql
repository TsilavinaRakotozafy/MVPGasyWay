-- ============================================================================
-- üîê SCRIPT CR√âATION ADMIN GASYWAY V2 - COLONNES SUPABASE SQL EXACTES
-- ============================================================================
-- Ce script cr√©e le compte admin en respectant exactement les colonnes 
-- des tables Supabase SQL existantes (pas de KV store)
-- ============================================================================

BEGIN;

-- Variables de configuration exactes pour les colonnes Supabase
DO $$
DECLARE
    admin_email VARCHAR := 'admin@gasyway.com';
    admin_password VARCHAR := 'Admin123!GasyWay';
    admin_first_name VARCHAR := 'Admin';
    admin_last_name VARCHAR := 'GasyWay';
    admin_phone VARCHAR := '+261123456789';
    admin_auth_id UUID;
    admin_exists BOOLEAN;
    profile_exists BOOLEAN;
BEGIN
    
    RAISE NOTICE 'üöÄ CR√âATION ADMIN GASYWAY V2';
    RAISE NOTICE '============================';
    RAISE NOTICE 'üìß Email: %', admin_email;
    RAISE NOTICE 'üóÇÔ∏è  Structure: Tables SQL Supabase (users, profiles)';
    RAISE NOTICE '';
    
    -- ========================================================================
    -- √âTAPE 1: V√©rification auth.users (cr√©√© via Dashboard Supabase)
    -- ========================================================================
    
    RAISE NOTICE 'üîç √âTAPE 1: V√©rification auth.users...';
    
    SELECT EXISTS(
        SELECT 1 FROM auth.users 
        WHERE email = admin_email
    ) INTO admin_exists;
    
    IF admin_exists THEN
        SELECT id INTO admin_auth_id 
        FROM auth.users 
        WHERE email = admin_email 
        LIMIT 1;
        
        RAISE NOTICE '‚úÖ Admin trouv√© dans auth.users';
        RAISE NOTICE '   ID: %', admin_auth_id;
    ELSE
        RAISE NOTICE '‚ùå Admin NON TROUV√â dans auth.users';
        RAISE NOTICE '';
        RAISE NOTICE 'üìù ACTIONS REQUISES:';
        RAISE NOTICE '1. Supabase Dashboard ‚Üí Authentication ‚Üí Users';
        RAISE NOTICE '2. Cliquer "Add user"';
        RAISE NOTICE '3. Email: %', admin_email;
        RAISE NOTICE '4. Password: %', admin_password;
        RAISE NOTICE '5. ‚úÖ Confirm email: true';
        RAISE NOTICE '6. Create user';
        RAISE NOTICE '7. Relancer ce script';
        
        RAISE EXCEPTION 'Cr√©ez d abord l admin dans auth.users via Dashboard';
    END IF;
    
    -- ========================================================================
    -- √âTAPE 2: Synchronisation dans public.users (colonnes exactes Supabase)
    -- ========================================================================
    
    RAISE NOTICE '';
    RAISE NOTICE 'üë§ √âTAPE 2: Synchronisation public.users...';
    
    -- V√©rifier que la table users existe
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.tables 
        WHERE table_name = 'users' AND table_schema = 'public'
    ) THEN
        RAISE EXCEPTION 'Table public.users introuvable. Cr√©ez les tables d abord.';
    END IF;
    
    -- Ins√©rer/Mettre √† jour avec les colonnes EXACTES de la structure Supabase
    INSERT INTO public.users (
        id,                    -- UUID PRIMARY KEY REFERENCES auth.users(id)
        email,                 -- VARCHAR NOT NULL UNIQUE
        role,                  -- VARCHAR DEFAULT 'voyageur' CHECK (role IN ('voyageur', 'admin'))
        status,                -- VARCHAR DEFAULT 'active' CHECK (status IN ('active', 'blocked'))
        gdpr_consent,          -- BOOLEAN NOT NULL DEFAULT false
        locale,                -- VARCHAR DEFAULT 'fr' CHECK (locale IN ('fr', 'en'))
        last_login,            -- TIMESTAMP WITH TIME ZONE
        created_at,            -- TIMESTAMP WITH TIME ZONE DEFAULT now()
        updated_at             -- TIMESTAMP WITH TIME ZONE DEFAULT now()
    ) VALUES (
        admin_auth_id,         -- ID depuis auth.users
        admin_email,           -- Email admin
        'admin',               -- R√¥le administrateur
        'active',              -- Statut actif
        true,                  -- Consentement RGPD
        'fr',                  -- Locale fran√ßais
        now(),                 -- Derni√®re connexion = maintenant
        now(),                 -- Cr√©√© maintenant
        now()                  -- Mis √† jour maintenant
    ) ON CONFLICT (id) DO UPDATE SET
        email = EXCLUDED.email,
        role = 'admin',                    -- Forcer le r√¥le admin
        status = 'active',                 -- Forcer statut actif
        gdpr_consent = true,               -- Consentement valid√©
        locale = 'fr',                     -- Locale fran√ßaise
        last_login = now(),                -- Mise √† jour derni√®re connexion
        updated_at = now();                -- Timestamp de mise √† jour
    
    RAISE NOTICE '‚úÖ Donn√©es synchronis√©es dans public.users';
    RAISE NOTICE '   R√¥le: admin';
    RAISE NOTICE '   Statut: active';
    RAISE NOTICE '   RGPD: true';
    
    -- ========================================================================
    -- √âTAPE 3: Cr√©ation profil dans public.profiles (colonnes exactes)
    -- ========================================================================
    
    RAISE NOTICE '';
    RAISE NOTICE 'üìã √âTAPE 3: Cr√©ation profil public.profiles...';
    
    -- V√©rifier que la table profiles existe
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.tables 
        WHERE table_name = 'profiles' AND table_schema = 'public'
    ) THEN
        RAISE EXCEPTION 'Table public.profiles introuvable. Cr√©ez les tables d abord.';
    END IF;
    
    -- Ins√©rer/Mettre √† jour avec les colonnes EXACTES de la structure Supabase
    INSERT INTO public.profiles (
        user_id,               -- UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE
        first_name,            -- VARCHAR NOT NULL
        last_name,             -- VARCHAR NOT NULL
        phone,                 -- VARCHAR NOT NULL
        avatar_url,            -- VARCHAR (nullable)
        bio,                   -- TEXT (nullable)
        created_at,            -- TIMESTAMP WITH TIME ZONE DEFAULT now()
        updated_at             -- TIMESTAMP WITH TIME ZONE DEFAULT now()
    ) VALUES (
        admin_auth_id,         -- R√©f√©rence vers users
        admin_first_name,      -- Pr√©nom admin
        admin_last_name,       -- Nom admin
        admin_phone,           -- T√©l√©phone admin
        NULL,                  -- Pas d'avatar par d√©faut
        'Administrateur de la plateforme GasyWay', -- Bio descriptive
        now(),                 -- Cr√©√© maintenant
        now()                  -- Mis √† jour maintenant
    ) ON CONFLICT (user_id) DO UPDATE SET
        first_name = EXCLUDED.first_name,
        last_name = EXCLUDED.last_name,
        phone = EXCLUDED.phone,
        bio = 'Administrateur de la plateforme GasyWay',
        updated_at = now();                -- Timestamp de mise √† jour
    
    RAISE NOTICE '‚úÖ Profil cr√©√© dans public.profiles';
    RAISE NOTICE '   Nom: % %', admin_first_name, admin_last_name;
    RAISE NOTICE '   T√©l√©phone: %', admin_phone;
    
    -- ========================================================================
    -- √âTAPE 4: Nettoyage donn√©es incoh√©rentes
    -- ========================================================================
    
    RAISE NOTICE '';
    RAISE NOTICE 'üßπ √âTAPE 4: Nettoyage donn√©es incoh√©rentes...';
    
    -- Supprimer doublons users (garder le plus r√©cent)
    WITH user_duplicates AS (
        SELECT id, ROW_NUMBER() OVER (PARTITION BY email ORDER BY created_at DESC) as rn
        FROM public.users 
        WHERE email = admin_email
    )
    DELETE FROM public.users 
    WHERE id IN (SELECT id FROM user_duplicates WHERE rn > 1);
    
    -- Supprimer doublons profiles (garder le plus r√©cent)
    WITH profile_duplicates AS (
        SELECT id, ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY created_at DESC) as rn
        FROM public.profiles 
        WHERE user_id = admin_auth_id
    )
    DELETE FROM public.profiles 
    WHERE id IN (SELECT id FROM profile_duplicates WHERE rn > 1);
    
    -- Nettoyer profils orphelins (sans user correspondant)
    DELETE FROM public.profiles 
    WHERE user_id NOT IN (SELECT id FROM public.users);
    
    -- Nettoyer user_interests orphelins (si table existe)
    IF EXISTS (
        SELECT 1 FROM information_schema.tables 
        WHERE table_name = 'user_interests' AND table_schema = 'public'
    ) THEN
        DELETE FROM public.user_interests 
        WHERE profile_id NOT IN (SELECT id FROM public.profiles);
    END IF;
    
    RAISE NOTICE '‚úÖ Nettoyage termin√©';
    
    -- ========================================================================
    -- √âTAPE 5: V√©rification finale de coh√©rence
    -- ========================================================================
    
    RAISE NOTICE '';
    RAISE NOTICE 'üîç √âTAPE 5: V√©rification finale...';
    
    -- V√©rifier la coh√©rence auth.users ‚Üî public.users ‚Üî public.profiles
    SELECT EXISTS(
        SELECT 1 FROM public.profiles 
        WHERE user_id = admin_auth_id
    ) INTO profile_exists;
    
    IF admin_exists AND profile_exists THEN
        RAISE NOTICE '';
        RAISE NOTICE 'üéâ SUCC√àS - COMPTE ADMIN CR√â√â!';
        RAISE NOTICE '================================';
        RAISE NOTICE 'UUID: %', admin_auth_id;
        RAISE NOTICE 'Email: %', admin_email;
        RAISE NOTICE 'R√¥le: admin';
        RAISE NOTICE 'Statut: active';
        RAISE NOTICE 'Nom: % %', admin_first_name, admin_last_name;
        RAISE NOTICE 'T√©l√©phone: %', admin_phone;
        RAISE NOTICE '';
        RAISE NOTICE 'üîë CONNEXION:';
        RAISE NOTICE 'Email: %', admin_email;
        RAISE NOTICE 'Password: %', admin_password;
        RAISE NOTICE '';
        RAISE NOTICE '‚úÖ Admin pr√™t pour connexion GasyWay!';
    ELSE
        RAISE NOTICE '';
        RAISE NOTICE '‚ùå PROBL√àME D√âTECT√â';
        RAISE NOTICE 'Auth.users: %', CASE WHEN admin_exists THEN 'OK' ELSE 'MANQUANT' END;
        RAISE NOTICE 'Profiles: %', CASE WHEN profile_exists THEN 'OK' ELSE 'MANQUANT' END;
    END IF;
    
END $$;

-- ============================================================================
-- V√âRIFICATION COMPL√àTE POST-CR√âATION
-- ============================================================================

SELECT 'üîç V√âRIFICATION COMPL√àTE ADMIN' as status;

-- Donn√©es compl√®tes admin avec jointures
SELECT 
    'ADMIN COMPLET' as verification,
    u.id as user_uuid,
    u.email,
    u.role,
    u.status,
    u.gdpr_consent,
    u.locale,
    u.last_login,
    u.created_at as user_created,
    p.first_name,
    p.last_name,
    p.phone,
    p.bio,
    p.created_at as profile_created,
    -- V√©rification synchronisation auth
    CASE 
        WHEN au.id IS NOT NULL THEN '‚úÖ SYNC OK'
        ELSE '‚ùå D√âSYNC'
    END as auth_sync_status
FROM public.users u
LEFT JOIN public.profiles p ON u.id = p.user_id
LEFT JOIN auth.users au ON u.id = au.id
WHERE u.email = 'admin@gasyway.com' OR u.role = 'admin'
ORDER BY u.created_at DESC;

-- Statistiques tables
SELECT 
    'STATISTIQUES' as verification,
    (SELECT COUNT(*) FROM public.users WHERE role = 'admin' AND status = 'active') as admins_actifs,
    (SELECT COUNT(*) FROM public.users WHERE status = 'active') as users_actifs,
    (SELECT COUNT(*) FROM public.profiles) as profiles_total,
    (SELECT COUNT(*) FROM public.interests) as interests_total;

-- Test coh√©rence donn√©es
SELECT 
    'COH√âRENCE' as verification,
    (SELECT COUNT(*) FROM public.users u LEFT JOIN auth.users au ON u.id = au.id WHERE au.id IS NULL) as users_sans_auth,
    (SELECT COUNT(*) FROM public.profiles p LEFT JOIN public.users u ON p.user_id = u.id WHERE u.id IS NULL) as profiles_orphelins,
    (SELECT COUNT(*) FROM public.users WHERE email IS NULL OR email = '') as emails_vides;

COMMIT;

-- ============================================================================
-- üìù NOTES SP√âCIFIQUES SUPABASE SQL
-- ============================================================================

/*
üî∏ COLONNES RESPECT√âES EXACTEMENT :

public.users:
‚úÖ id UUID PRIMARY KEY REFERENCES auth.users(id)
‚úÖ email VARCHAR NOT NULL UNIQUE  
‚úÖ role VARCHAR DEFAULT 'voyageur' CHECK (role IN ('voyageur', 'admin'))
‚úÖ status VARCHAR DEFAULT 'active' CHECK (status IN ('active', 'blocked'))
‚úÖ gdpr_consent BOOLEAN NOT NULL DEFAULT false
‚úÖ locale VARCHAR DEFAULT 'fr' CHECK (locale IN ('fr', 'en'))
‚úÖ last_login TIMESTAMP WITH TIME ZONE
‚úÖ created_at TIMESTAMP WITH TIME ZONE DEFAULT now()
‚úÖ updated_at TIMESTAMP WITH TIME ZONE DEFAULT now()

public.profiles:
‚úÖ id UUID PRIMARY KEY DEFAULT gen_random_uuid()
‚úÖ user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE
‚úÖ first_name VARCHAR NOT NULL
‚úÖ last_name VARCHAR NOT NULL
‚úÖ phone VARCHAR NOT NULL
‚úÖ avatar_url VARCHAR (nullable)
‚úÖ bio TEXT (nullable)
‚úÖ created_at TIMESTAMP WITH TIME ZONE DEFAULT now()
‚úÖ updated_at TIMESTAMP WITH TIME ZONE DEFAULT now()
‚úÖ UNIQUE(user_id) -- Un utilisateur = un profil

üî∏ DIFF√âRENCES AVEC KV STORE :
‚ùå Plus de stockage cl√©-valeur
‚úÖ Utilisation des tables relationnelles Supabase
‚úÖ Respect des contraintes FK et CHECK
‚úÖ Triggers updated_at automatiques
‚úÖ RLS (Row Level Security) respect√©

üî∏ PR√âREQUIS :
‚úÖ Tables cr√©√©es via create_tables.sql
‚úÖ Admin cr√©√© dans auth.users via Dashboard
‚úÖ Permissions SQL Editor actives

üî∏ APR√àS EX√âCUTION :
‚úÖ Test de connexion sur application
‚úÖ V√©rification r√¥le admin d√©tect√©
‚úÖ Acc√®s dashboard admin fonctionnel
*/